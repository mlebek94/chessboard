
freeRTOS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00001b38  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001b50  20001b50  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a75c  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000390c  00000000  00000000  0003a7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d40  00000000  00000000  0003e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bb8  00000000  00000000  0003edf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007e68  00000000  00000000  0003f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000489c  00000000  00000000  00047810  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c0ac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000032e4  00000000  00000000  0004c128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050b4 	.word	0x080050b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	080050b4 	.word	0x080050b4

080001e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	4a08      	ldr	r2, [pc, #32]	; (8000208 <HAL_Init+0x28>)
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <HAL_Init+0x28>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0310 	orr.w	r3, r3, #16
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f0:	2003      	movs	r0, #3
 80001f2:	f000 f925 	bl	8000440 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f6:	200f      	movs	r0, #15
 80001f8:	f000 f808 	bl	800020c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001fc:	f004 fde8 	bl	8004dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000200:	2300      	movs	r3, #0
}
 8000202:	4618      	mov	r0, r3
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40022000 	.word	0x40022000

0800020c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000214:	4b12      	ldr	r3, [pc, #72]	; (8000260 <HAL_InitTick+0x54>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <HAL_InitTick+0x58>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4619      	mov	r1, r3
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	fbb3 f3f1 	udiv	r3, r3, r1
 8000226:	fbb2 f3f3 	udiv	r3, r2, r3
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f93d 	bl	80004aa <HAL_SYSTICK_Config>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000236:	2301      	movs	r3, #1
 8000238:	e00e      	b.n	8000258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b0f      	cmp	r3, #15
 800023e:	d80a      	bhi.n	8000256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000240:	2200      	movs	r2, #0
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 f905 	bl	8000456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <HAL_InitTick+0x5c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000252:	2300      	movs	r3, #0
 8000254:	e000      	b.n	8000258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000256:	2301      	movs	r3, #1
}
 8000258:	4618      	mov	r0, r3
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000014 	.word	0x20000014
 8000264:	20000004 	.word	0x20000004
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <HAL_IncTick+0x20>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	461a      	mov	r2, r3
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x24>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4413      	add	r3, r2
 800027c:	4a04      	ldr	r2, [pc, #16]	; (8000290 <HAL_IncTick+0x24>)
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	20000004 	.word	0x20000004
 8000290:	20001ac4 	.word	0x20001ac4

08000294 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  return uwTick;  
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <HAL_GetTick+0x14>)
 800029a:	681b      	ldr	r3, [r3, #0]
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20001ac4 	.word	0x20001ac4

080002ac <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <NVIC_GetPriorityGrouping+0x18>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	f003 0307 	and.w	r3, r3, #7
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800031a:	4909      	ldr	r1, [pc, #36]	; (8000340 <NVIC_EnableIRQ+0x30>)
 800031c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000320:	095b      	lsrs	r3, r3, #5
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	f002 021f 	and.w	r2, r2, #31
 8000328:	2001      	movs	r0, #1
 800032a:	fa00 f202 	lsl.w	r2, r0, r2
 800032e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e100 	.word	0xe000e100

08000344 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	da0b      	bge.n	8000370 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	490d      	ldr	r1, [pc, #52]	; (8000390 <NVIC_SetPriority+0x4c>)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f003 030f 	and.w	r3, r3, #15
 8000360:	3b04      	subs	r3, #4
 8000362:	683a      	ldr	r2, [r7, #0]
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	0112      	lsls	r2, r2, #4
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	440b      	add	r3, r1
 800036c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036e:	e009      	b.n	8000384 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000370:	4908      	ldr	r1, [pc, #32]	; (8000394 <NVIC_SetPriority+0x50>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	683a      	ldr	r2, [r7, #0]
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	0112      	lsls	r2, r2, #4
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	440b      	add	r3, r1
 8000380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	e000e100 	.word	0xe000e100

08000398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000398:	b480      	push	{r7}
 800039a:	b089      	sub	sp, #36	; 0x24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f003 0307 	and.w	r3, r3, #7
 80003aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	f1c3 0307 	rsb	r3, r3, #7
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	bf28      	it	cs
 80003b6:	2304      	movcs	r3, #4
 80003b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3304      	adds	r3, #4
 80003be:	2b06      	cmp	r3, #6
 80003c0:	d902      	bls.n	80003c8 <NVIC_EncodePriority+0x30>
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3b03      	subs	r3, #3
 80003c6:	e000      	b.n	80003ca <NVIC_EncodePriority+0x32>
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	2201      	movs	r2, #1
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	1e5a      	subs	r2, r3, #1
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	401a      	ands	r2, r3
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003de:	2101      	movs	r1, #1
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	1e59      	subs	r1, r3, #1
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ec:	4313      	orrs	r3, r2
         );
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3724      	adds	r7, #36	; 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800040c:	d301      	bcc.n	8000412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040e:	2301      	movs	r3, #1
 8000410:	e00f      	b.n	8000432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <SysTick_Config+0x40>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041a:	210f      	movs	r1, #15
 800041c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000420:	f7ff ff90 	bl	8000344 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SysTick_Config+0x40>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_Config+0x40>)
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	e000e010 	.word	0xe000e010

08000440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff2f 	bl	80002ac <NVIC_SetPriorityGrouping>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	4603      	mov	r3, r0
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000468:	f7ff ff44 	bl	80002f4 <NVIC_GetPriorityGrouping>
 800046c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	68b9      	ldr	r1, [r7, #8]
 8000472:	6978      	ldr	r0, [r7, #20]
 8000474:	f7ff ff90 	bl	8000398 <NVIC_EncodePriority>
 8000478:	4602      	mov	r2, r0
 800047a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff5f 	bl	8000344 <NVIC_SetPriority>
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	4603      	mov	r3, r0
 8000496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff37 	bl	8000310 <NVIC_EnableIRQ>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff ffa2 	bl	80003fc <SysTick_Config>
 80004b8:	4603      	mov	r3, r0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004ca:	2300      	movs	r3, #0
 80004cc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d005      	beq.n	80004e4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2204      	movs	r2, #4
 80004dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004de:	2301      	movs	r3, #1
 80004e0:	73fb      	strb	r3, [r7, #15]
 80004e2:	e027      	b.n	8000534 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	6812      	ldr	r2, [r2, #0]
 80004ec:	6812      	ldr	r2, [r2, #0]
 80004ee:	f022 020e 	bic.w	r2, r2, #14
 80004f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	6812      	ldr	r2, [r2, #0]
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	f022 0201 	bic.w	r2, r2, #1
 8000502:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800050c:	2101      	movs	r1, #1
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2201      	movs	r2, #1
 8000518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000528:	2b00      	cmp	r3, #0
 800052a:	d003      	beq.n	8000534 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	4798      	blx	r3
    } 
  }
  return status;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000540:	b480      	push	{r7}
 8000542:	b087      	sub	sp, #28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000556:	e160      	b.n	800081a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	2101      	movs	r1, #1
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	fa01 f303 	lsl.w	r3, r1, r3
 8000564:	4013      	ands	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b00      	cmp	r3, #0
 800056c:	f000 8152 	beq.w	8000814 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d003      	beq.n	8000580 <HAL_GPIO_Init+0x40>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2b12      	cmp	r3, #18
 800057e:	d123      	bne.n	80005c8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	08da      	lsrs	r2, r3, #3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3208      	adds	r2, #8
 8000588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800058c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	f003 0307 	and.w	r3, r3, #7
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	220f      	movs	r2, #15
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	43db      	mvns	r3, r3
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	4013      	ands	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	691a      	ldr	r2, [r3, #16]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	08da      	lsrs	r2, r3, #3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3208      	adds	r2, #8
 80005c2:	6939      	ldr	r1, [r7, #16]
 80005c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	2203      	movs	r2, #3
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	4013      	ands	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	f003 0203 	and.w	r2, r3, #3
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	693a      	ldr	r2, [r7, #16]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00b      	beq.n	800061c <HAL_GPIO_Init+0xdc>
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d007      	beq.n	800061c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000610:	2b11      	cmp	r3, #17
 8000612:	d003      	beq.n	800061c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	2b12      	cmp	r3, #18
 800061a:	d130      	bne.n	800067e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2203      	movs	r2, #3
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	4013      	ands	r3, r2
 8000632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	68da      	ldr	r2, [r3, #12]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	693a      	ldr	r2, [r7, #16]
 8000642:	4313      	orrs	r3, r2
 8000644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	693a      	ldr	r2, [r7, #16]
 800064a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000652:	2201      	movs	r2, #1
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43db      	mvns	r3, r3
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4013      	ands	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	091b      	lsrs	r3, r3, #4
 8000668:	f003 0201 	and.w	r2, r3, #1
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	4313      	orrs	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2203      	movs	r2, #3
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	4013      	ands	r3, r2
 8000694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f000 80ac 	beq.w	8000814 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006bc:	4a5e      	ldr	r2, [pc, #376]	; (8000838 <HAL_GPIO_Init+0x2f8>)
 80006be:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <HAL_GPIO_Init+0x2f8>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <HAL_GPIO_Init+0x2f8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006d4:	4a59      	ldr	r2, [pc, #356]	; (800083c <HAL_GPIO_Init+0x2fc>)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	089b      	lsrs	r3, r3, #2
 80006da:	3302      	adds	r3, #2
 80006dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	f003 0303 	and.w	r3, r3, #3
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	220f      	movs	r2, #15
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	4013      	ands	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006fe:	d025      	beq.n	800074c <HAL_GPIO_Init+0x20c>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a4f      	ldr	r2, [pc, #316]	; (8000840 <HAL_GPIO_Init+0x300>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d01f      	beq.n	8000748 <HAL_GPIO_Init+0x208>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a4e      	ldr	r2, [pc, #312]	; (8000844 <HAL_GPIO_Init+0x304>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d019      	beq.n	8000744 <HAL_GPIO_Init+0x204>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a4d      	ldr	r2, [pc, #308]	; (8000848 <HAL_GPIO_Init+0x308>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d013      	beq.n	8000740 <HAL_GPIO_Init+0x200>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a4c      	ldr	r2, [pc, #304]	; (800084c <HAL_GPIO_Init+0x30c>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d00d      	beq.n	800073c <HAL_GPIO_Init+0x1fc>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a4b      	ldr	r2, [pc, #300]	; (8000850 <HAL_GPIO_Init+0x310>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d007      	beq.n	8000738 <HAL_GPIO_Init+0x1f8>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a4a      	ldr	r2, [pc, #296]	; (8000854 <HAL_GPIO_Init+0x314>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d101      	bne.n	8000734 <HAL_GPIO_Init+0x1f4>
 8000730:	2306      	movs	r3, #6
 8000732:	e00c      	b.n	800074e <HAL_GPIO_Init+0x20e>
 8000734:	2307      	movs	r3, #7
 8000736:	e00a      	b.n	800074e <HAL_GPIO_Init+0x20e>
 8000738:	2305      	movs	r3, #5
 800073a:	e008      	b.n	800074e <HAL_GPIO_Init+0x20e>
 800073c:	2304      	movs	r3, #4
 800073e:	e006      	b.n	800074e <HAL_GPIO_Init+0x20e>
 8000740:	2303      	movs	r3, #3
 8000742:	e004      	b.n	800074e <HAL_GPIO_Init+0x20e>
 8000744:	2302      	movs	r3, #2
 8000746:	e002      	b.n	800074e <HAL_GPIO_Init+0x20e>
 8000748:	2301      	movs	r3, #1
 800074a:	e000      	b.n	800074e <HAL_GPIO_Init+0x20e>
 800074c:	2300      	movs	r3, #0
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	f002 0203 	and.w	r2, r2, #3
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	4093      	lsls	r3, r2
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	4313      	orrs	r3, r2
 800075c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800075e:	4937      	ldr	r1, [pc, #220]	; (800083c <HAL_GPIO_Init+0x2fc>)
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	3302      	adds	r3, #2
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800076c:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <HAL_GPIO_Init+0x318>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	43db      	mvns	r3, r3
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4313      	orrs	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <HAL_GPIO_Init+0x318>)
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <HAL_GPIO_Init+0x318>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	43db      	mvns	r3, r3
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	4013      	ands	r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007ba:	4a27      	ldr	r2, [pc, #156]	; (8000858 <HAL_GPIO_Init+0x318>)
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <HAL_GPIO_Init+0x318>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	43db      	mvns	r3, r3
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d003      	beq.n	80007e4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007e4:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <HAL_GPIO_Init+0x318>)
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_GPIO_Init+0x318>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	43db      	mvns	r3, r3
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4013      	ands	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4313      	orrs	r3, r2
 800080c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_GPIO_Init+0x318>)
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	3301      	adds	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	fa22 f303 	lsr.w	r3, r2, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	f47f ae97 	bne.w	8000558 <HAL_GPIO_Init+0x18>
  }
}
 800082a:	bf00      	nop
 800082c:	371c      	adds	r7, #28
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	40010000 	.word	0x40010000
 8000840:	48000400 	.word	0x48000400
 8000844:	48000800 	.word	0x48000800
 8000848:	48000c00 	.word	0x48000c00
 800084c:	48001000 	.word	0x48001000
 8000850:	48001400 	.word	0x48001400
 8000854:	48001800 	.word	0x48001800
 8000858:	40010400 	.word	0x40010400

0800085c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691a      	ldr	r2, [r3, #16]
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000874:	2301      	movs	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e001      	b.n	800087e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
 8000898:	4613      	mov	r3, r2
 800089a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800089c:	787b      	ldrb	r3, [r7, #1]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008a2:	887a      	ldrh	r2, [r7, #2]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008a8:	e002      	b.n	80008b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008aa:	887a      	ldrh	r2, [r7, #2]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	405a      	eors	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	615a      	str	r2, [r3, #20]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f000 beda 	b.w	80016ae <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	f000 8164 	beq.w	8000bd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800090a:	4bb0      	ldr	r3, [pc, #704]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 030c 	and.w	r3, r3, #12
 8000912:	2b04      	cmp	r3, #4
 8000914:	d00c      	beq.n	8000930 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000916:	4bad      	ldr	r3, [pc, #692]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 030c 	and.w	r3, r3, #12
 800091e:	2b08      	cmp	r3, #8
 8000920:	d15a      	bne.n	80009d8 <HAL_RCC_OscConfig+0xf8>
 8000922:	4baa      	ldr	r3, [pc, #680]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800092a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800092e:	d153      	bne.n	80009d8 <HAL_RCC_OscConfig+0xf8>
 8000930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000934:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000938:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800093c:	fa93 f3a3 	rbit	r3, r3
 8000940:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000944:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000948:	fab3 f383 	clz	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b01      	cmp	r3, #1
 800095a:	d102      	bne.n	8000962 <HAL_RCC_OscConfig+0x82>
 800095c:	4b9b      	ldr	r3, [pc, #620]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	e015      	b.n	800098e <HAL_RCC_OscConfig+0xae>
 8000962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000966:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800096e:	fa93 f3a3 	rbit	r3, r3
 8000972:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800097e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800098a:	4b90      	ldr	r3, [pc, #576]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000992:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000996:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800099a:	fa92 f2a2 	rbit	r2, r2
 800099e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80009a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	b252      	sxtb	r2, r2
 80009ac:	f042 0220 	orr.w	r2, r2, #32
 80009b0:	b252      	sxtb	r2, r2
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	f002 021f 	and.w	r2, r2, #31
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	4013      	ands	r3, r2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f000 8105 	beq.w	8000bd0 <HAL_RCC_OscConfig+0x2f0>
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 80ff 	bne.w	8000bd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f000 be6b 	b.w	80016ae <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e2:	d106      	bne.n	80009f2 <HAL_RCC_OscConfig+0x112>
 80009e4:	4a79      	ldr	r2, [pc, #484]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 80009e6:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	e030      	b.n	8000a54 <HAL_RCC_OscConfig+0x174>
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10c      	bne.n	8000a16 <HAL_RCC_OscConfig+0x136>
 80009fc:	4a73      	ldr	r2, [pc, #460]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 80009fe:	4b73      	ldr	r3, [pc, #460]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4a70      	ldr	r2, [pc, #448]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a0a:	4b70      	ldr	r3, [pc, #448]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e01e      	b.n	8000a54 <HAL_RCC_OscConfig+0x174>
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a20:	d10c      	bne.n	8000a3c <HAL_RCC_OscConfig+0x15c>
 8000a22:	4a6a      	ldr	r2, [pc, #424]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a24:	4b69      	ldr	r3, [pc, #420]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	4a67      	ldr	r2, [pc, #412]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a30:	4b66      	ldr	r3, [pc, #408]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	e00b      	b.n	8000a54 <HAL_RCC_OscConfig+0x174>
 8000a3c:	4a63      	ldr	r2, [pc, #396]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a3e:	4b63      	ldr	r3, [pc, #396]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4a60      	ldr	r2, [pc, #384]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a4a:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a52:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d05a      	beq.n	8000b14 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a5e:	f7ff fc19 	bl	8000294 <HAL_GetTick>
 8000a62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a66:	e00a      	b.n	8000a7e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a68:	f7ff fc14 	bl	8000294 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	2b64      	cmp	r3, #100	; 0x64
 8000a76:	d902      	bls.n	8000a7e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	f000 be18 	b.w	80016ae <HAL_RCC_OscConfig+0xdce>
 8000a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a82:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a86:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a8a:	fa93 f3a3 	rbit	r3, r3
 8000a8e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a96:	fab3 f383 	clz	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	095b      	lsrs	r3, r3, #5
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x1d0>
 8000aaa:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	e015      	b.n	8000adc <HAL_RCC_OscConfig+0x1fc>
 8000ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000acc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ad0:	fa93 f3a3 	rbit	r3, r3
 8000ad4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ae0:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ae4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ae8:	fa92 f2a2 	rbit	r2, r2
 8000aec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000af0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	b252      	sxtb	r2, r2
 8000afa:	f042 0220 	orr.w	r2, r2, #32
 8000afe:	b252      	sxtb	r2, r2
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	f002 021f 	and.w	r2, r2, #31
 8000b06:	2101      	movs	r1, #1
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0aa      	beq.n	8000a68 <HAL_RCC_OscConfig+0x188>
 8000b12:	e05e      	b.n	8000bd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b14:	f7ff fbbe 	bl	8000294 <HAL_GetTick>
 8000b18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1c:	e00a      	b.n	8000b34 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fbb9 	bl	8000294 <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b64      	cmp	r3, #100	; 0x64
 8000b2c:	d902      	bls.n	8000b34 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	f000 bdbd 	b.w	80016ae <HAL_RCC_OscConfig+0xdce>
 8000b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b38:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b40:	fa93 f3a3 	rbit	r3, r3
 8000b44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000b48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b4c:	fab3 f383 	clz	r3, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d102      	bne.n	8000b66 <HAL_RCC_OscConfig+0x286>
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	e015      	b.n	8000b92 <HAL_RCC_OscConfig+0x2b2>
 8000b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b86:	fa93 f3a3 	rbit	r3, r3
 8000b8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_RCC_OscConfig+0x2ec>)
 8000b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b9a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b9e:	fa92 f2a2 	rbit	r2, r2
 8000ba2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000ba6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b252      	sxtb	r2, r2
 8000bb0:	f042 0220 	orr.w	r2, r2, #32
 8000bb4:	b252      	sxtb	r2, r2
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	f002 021f 	and.w	r2, r2, #31
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1aa      	bne.n	8000b1e <HAL_RCC_OscConfig+0x23e>
 8000bc8:	e003      	b.n	8000bd2 <HAL_RCC_OscConfig+0x2f2>
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 8171 	beq.w	8000ec4 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be2:	4bd0      	ldr	r3, [pc, #832]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00c      	beq.n	8000c08 <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bee:	4bcd      	ldr	r3, [pc, #820]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d16e      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x3f8>
 8000bfa:	4bca      	ldr	r3, [pc, #808]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c06:	d167      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x3f8>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000c12:	fa93 f3a3 	rbit	r3, r3
 8000c16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000c1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1e:	fab3 f383 	clz	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	095b      	lsrs	r3, r3, #5
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d102      	bne.n	8000c38 <HAL_RCC_OscConfig+0x358>
 8000c32:	4bbc      	ldr	r3, [pc, #752]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <HAL_RCC_OscConfig+0x380>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c50:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c5c:	4bb1      	ldr	r3, [pc, #708]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	2202      	movs	r2, #2
 8000c62:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c66:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c6a:	fa92 f2a2 	rbit	r2, r2
 8000c6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	b252      	sxtb	r2, r2
 8000c7c:	f042 0220 	orr.w	r2, r2, #32
 8000c80:	b252      	sxtb	r2, r2
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	f002 021f 	and.w	r2, r2, #31
 8000c88:	2101      	movs	r1, #1
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d007      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x3c4>
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d002      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f000 bd05 	b.w	80016ae <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca4:	489f      	ldr	r0, [pc, #636]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000ca6:	4b9f      	ldr	r3, [pc, #636]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6919      	ldr	r1, [r3, #16]
 8000cb4:	23f8      	movs	r3, #248	; 0xf8
 8000cb6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000cc6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000cca:	fab3 f383 	clz	r3, r3
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	e0f5      	b.n	8000ec4 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8085 	beq.w	8000dee <HAL_RCC_OscConfig+0x50e>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cee:	fa93 f3a3 	rbit	r3, r3
 8000cf2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000cf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fac1 	bl	8000294 <HAL_GetTick>
 8000d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d16:	e00a      	b.n	8000d2e <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fabc 	bl	8000294 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d902      	bls.n	8000d2e <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f000 bcc0 	b.w	80016ae <HAL_RCC_OscConfig+0xdce>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000d40:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_OscConfig+0x47e>
 8000d58:	4b72      	ldr	r3, [pc, #456]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	e013      	b.n	8000d86 <HAL_RCC_OscConfig+0x4a6>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d82:	4b68      	ldr	r3, [pc, #416]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	2202      	movs	r2, #2
 8000d88:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d90:	fa92 f2a2 	rbit	r2, r2
 8000d94:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b252      	sxtb	r2, r2
 8000da2:	f042 0220 	orr.w	r2, r2, #32
 8000da6:	b252      	sxtb	r2, r2
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	f002 021f 	and.w	r2, r2, #31
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0ae      	beq.n	8000d18 <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dba:	485a      	ldr	r0, [pc, #360]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000dbc:	4b59      	ldr	r3, [pc, #356]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6919      	ldr	r1, [r3, #16]
 8000dca:	23f8      	movs	r3, #248	; 0xf8
 8000dcc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000ddc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	6003      	str	r3, [r0, #0]
 8000dec:	e06a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x5e4>
 8000dee:	2301      	movs	r3, #1
 8000df0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000e00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e04:	fab3 f383 	clz	r3, r3
 8000e08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	461a      	mov	r2, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fa3c 	bl	8000294 <HAL_GetTick>
 8000e1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e20:	e00a      	b.n	8000e38 <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e22:	f7ff fa37 	bl	8000294 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d902      	bls.n	8000e38 <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	f000 bc3b 	b.w	80016ae <HAL_RCC_OscConfig+0xdce>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	095b      	lsrs	r3, r3, #5
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <HAL_RCC_OscConfig+0x588>
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	e013      	b.n	8000e90 <HAL_RCC_OscConfig+0x5b0>
 8000e68:	2302      	movs	r3, #2
 8000e6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_RCC_OscConfig+0x644>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	2202      	movs	r2, #2
 8000e92:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e96:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e9a:	fa92 f2a2 	rbit	r2, r2
 8000e9e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000ea2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000ea6:	fab2 f282 	clz	r2, r2
 8000eaa:	b252      	sxtb	r2, r2
 8000eac:	f042 0220 	orr.w	r2, r2, #32
 8000eb0:	b252      	sxtb	r2, r2
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f002 021f 	and.w	r2, r2, #31
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1ae      	bne.n	8000e22 <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 80d7 	beq.w	8001082 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d066      	beq.n	8000fac <HAL_RCC_OscConfig+0x6cc>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000ef0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_RCC_OscConfig+0x648>)
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	461a      	mov	r2, r3
 8000f02:	2301      	movs	r3, #1
 8000f04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff f9c5 	bl	8000294 <HAL_GetTick>
 8000f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	e00d      	b.n	8000f2c <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff f9c0 	bl	8000294 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d905      	bls.n	8000f2c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e3c4      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
 8000f24:	40021000 	.word	0x40021000
 8000f28:	10908120 	.word	0x10908120
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f48:	fa93 f2a3 	rbit	r2, r3
 8000f4c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f56:	2202      	movs	r2, #2
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	fa93 f2a3 	rbit	r2, r3
 8000f64:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	4ba5      	ldr	r3, [pc, #660]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8000f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f6e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f72:	2102      	movs	r1, #2
 8000f74:	6019      	str	r1, [r3, #0]
 8000f76:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	fa93 f1a3 	rbit	r1, r3
 8000f80:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f84:	6019      	str	r1, [r3, #0]
  return(result);
 8000f86:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0b2      	beq.n	8000f10 <HAL_RCC_OscConfig+0x630>
 8000faa:	e06a      	b.n	8001082 <HAL_RCC_OscConfig+0x7a2>
 8000fac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	fa93 f2a3 	rbit	r2, r3
 8000fbe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fc2:	601a      	str	r2, [r3, #0]
  return(result);
 8000fc4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fc8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b8c      	ldr	r3, [pc, #560]	; (8001204 <HAL_RCC_OscConfig+0x924>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2300      	movs	r3, #0
 8000fda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff f95a 	bl	8000294 <HAL_GetTick>
 8000fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe4:	e009      	b.n	8000ffa <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe6:	f7ff f955 	bl	8000294 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e359      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
 8000ffa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ffe:	2202      	movs	r2, #2
 8001000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	fa93 f2a3 	rbit	r2, r3
 800100c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001016:	2202      	movs	r2, #2
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	fa93 f2a3 	rbit	r2, r3
 8001024:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800102e:	2202      	movs	r2, #2
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	fa93 f2a3 	rbit	r2, r3
 800103c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001040:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001042:	4b6f      	ldr	r3, [pc, #444]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001046:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800104a:	2102      	movs	r1, #2
 800104c:	6019      	str	r1, [r3, #0]
 800104e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	fa93 f1a3 	rbit	r1, r3
 8001058:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800105c:	6019      	str	r1, [r3, #0]
  return(result);
 800105e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	fab3 f383 	clz	r3, r3
 8001068:	b25b      	sxtb	r3, r3
 800106a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800106e:	b25b      	sxtb	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	2101      	movs	r1, #1
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1b1      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8159 	beq.w	8001344 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d112      	bne.n	80010ca <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	4a56      	ldr	r2, [pc, #344]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 80010a6:	4b56      	ldr	r3, [pc, #344]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	61d3      	str	r3, [r2, #28]
 80010b0:	4b53      	ldr	r3, [pc, #332]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ca:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_RCC_OscConfig+0x928>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d11a      	bne.n	800110c <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d6:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <HAL_RCC_OscConfig+0x928>)
 80010d8:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <HAL_RCC_OscConfig+0x928>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e2:	f7ff f8d7 	bl	8000294 <HAL_GetTick>
 80010e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ea:	e009      	b.n	8001100 <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ec:	f7ff f8d2 	bl	8000294 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b64      	cmp	r3, #100	; 0x64
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e2d6      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_RCC_OscConfig+0x928>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0ef      	beq.n	80010ec <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d106      	bne.n	8001124 <HAL_RCC_OscConfig+0x844>
 8001116:	4a3a      	ldr	r2, [pc, #232]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001118:	4b39      	ldr	r3, [pc, #228]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6213      	str	r3, [r2, #32]
 8001122:	e02f      	b.n	8001184 <HAL_RCC_OscConfig+0x8a4>
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x868>
 800112e:	4a34      	ldr	r2, [pc, #208]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001130:	4b33      	ldr	r3, [pc, #204]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4a31      	ldr	r2, [pc, #196]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 800113c:	4b30      	ldr	r3, [pc, #192]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f023 0304 	bic.w	r3, r3, #4
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0x8a4>
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b05      	cmp	r3, #5
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x88c>
 8001152:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6213      	str	r3, [r2, #32]
 800115e:	4a28      	ldr	r2, [pc, #160]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6213      	str	r3, [r2, #32]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0x8a4>
 800116c:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	6213      	str	r3, [r2, #32]
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	f023 0304 	bic.w	r3, r3, #4
 8001182:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d06b      	beq.n	8001266 <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118e:	f7ff f881 	bl	8000294 <HAL_GetTick>
 8001192:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001198:	f7ff f87c 	bl	8000294 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e27e      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
 80011b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011b4:	2202      	movs	r2, #2
 80011b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	fa93 f2a3 	rbit	r2, r3
 80011c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011cc:	2202      	movs	r2, #2
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	fa93 f2a3 	rbit	r2, r3
 80011da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011de:	601a      	str	r2, [r3, #0]
  return(result);
 80011e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	095b      	lsrs	r3, r3, #5
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d108      	bne.n	800120c <HAL_RCC_OscConfig+0x92c>
 80011fa:	4b01      	ldr	r3, [pc, #4]	; (8001200 <HAL_RCC_OscConfig+0x920>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	e013      	b.n	8001228 <HAL_RCC_OscConfig+0x948>
 8001200:	40021000 	.word	0x40021000
 8001204:	10908120 	.word	0x10908120
 8001208:	40007000 	.word	0x40007000
 800120c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001210:	2202      	movs	r2, #2
 8001212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	fa93 f2a3 	rbit	r2, r3
 800121e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	4bc0      	ldr	r3, [pc, #768]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800122c:	2102      	movs	r1, #2
 800122e:	6011      	str	r1, [r2, #0]
 8001230:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	fa92 f1a2 	rbit	r1, r2
 800123a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800123e:	6011      	str	r1, [r2, #0]
  return(result);
 8001240:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	fab2 f282 	clz	r2, r2
 800124a:	b252      	sxtb	r2, r2
 800124c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001250:	b252      	sxtb	r2, r2
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	f002 021f 	and.w	r2, r2, #31
 8001258:	2101      	movs	r1, #1
 800125a:	fa01 f202 	lsl.w	r2, r1, r2
 800125e:	4013      	ands	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d099      	beq.n	8001198 <HAL_RCC_OscConfig+0x8b8>
 8001264:	e064      	b.n	8001330 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	f7ff f815 	bl	8000294 <HAL_GetTick>
 800126a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7ff f810 	bl	8000294 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e212      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
 8001288:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800128c:	2202      	movs	r2, #2
 800128e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	fa93 f2a3 	rbit	r2, r3
 800129a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a4:	2202      	movs	r2, #2
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	fa93 f2a3 	rbit	r2, r3
 80012b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012b6:	601a      	str	r2, [r3, #0]
  return(result);
 80012b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	095b      	lsrs	r3, r3, #5
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d102      	bne.n	80012d8 <HAL_RCC_OscConfig+0x9f8>
 80012d2:	4b95      	ldr	r3, [pc, #596]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	e00d      	b.n	80012f4 <HAL_RCC_OscConfig+0xa14>
 80012d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012dc:	2202      	movs	r2, #2
 80012de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	fa93 f2a3 	rbit	r2, r3
 80012ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	4b8d      	ldr	r3, [pc, #564]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012f8:	2102      	movs	r1, #2
 80012fa:	6011      	str	r1, [r2, #0]
 80012fc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	fa92 f1a2 	rbit	r1, r2
 8001306:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800130a:	6011      	str	r1, [r2, #0]
  return(result);
 800130c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	b252      	sxtb	r2, r2
 8001318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800131c:	b252      	sxtb	r2, r2
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f002 021f 	and.w	r2, r2, #31
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d19f      	bne.n	8001270 <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001330:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001338:	4a7b      	ldr	r2, [pc, #492]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 800133a:	4b7b      	ldr	r3, [pc, #492]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001342:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 81ae 	beq.w	80016ac <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001350:	4b75      	ldr	r3, [pc, #468]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	f000 81a5 	beq.w	80016a8 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b02      	cmp	r3, #2
 8001366:	f040 811d 	bne.w	80015a4 <HAL_RCC_OscConfig+0xcc4>
 800136a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800136e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fa93 f2a3 	rbit	r2, r3
 800137e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001382:	601a      	str	r2, [r3, #0]
  return(result);
 8001384:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001388:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001392:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	461a      	mov	r2, r3
 800139a:	2300      	movs	r3, #0
 800139c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7fe ff79 	bl	8000294 <HAL_GetTick>
 80013a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	e009      	b.n	80013bc <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7fe ff74 	bl	8000294 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e178      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
 80013bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	fa93 f2a3 	rbit	r2, r3
 80013d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013d4:	601a      	str	r2, [r3, #0]
  return(result);
 80013d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d102      	bne.n	80013f6 <HAL_RCC_OscConfig+0xb16>
 80013f0:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	e01b      	b.n	800142e <HAL_RCC_OscConfig+0xb4e>
 80013f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fa93 f2a3 	rbit	r2, r3
 8001424:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001432:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001436:	6011      	str	r1, [r2, #0]
 8001438:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	fa92 f1a2 	rbit	r1, r2
 8001442:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001446:	6011      	str	r1, [r2, #0]
  return(result);
 8001448:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	fab2 f282 	clz	r2, r2
 8001452:	b252      	sxtb	r2, r2
 8001454:	f042 0220 	orr.w	r2, r2, #32
 8001458:	b252      	sxtb	r2, r2
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f002 021f 	and.w	r2, r2, #31
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d19d      	bne.n	80013a8 <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	492e      	ldr	r1, [pc, #184]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	f023 020f 	bic.w	r2, r3, #15
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	4313      	orrs	r3, r2
 800147e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001480:	4829      	ldr	r0, [pc, #164]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a19      	ldr	r1, [r3, #32]
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	430b      	orrs	r3, r1
 8001498:	4313      	orrs	r3, r2
 800149a:	6043      	str	r3, [r0, #4]
 800149c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa93 f2a3 	rbit	r2, r3
 80014b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014b4:	601a      	str	r2, [r3, #0]
  return(result);
 80014b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	461a      	mov	r2, r3
 80014cc:	2301      	movs	r3, #1
 80014ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7fe fee0 	bl	8000294 <HAL_GetTick>
 80014d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d8:	e009      	b.n	80014ee <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014da:	f7fe fedb 	bl	8000294 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e0df      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
 80014ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fa93 f2a3 	rbit	r2, r3
 8001502:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001506:	601a      	str	r2, [r3, #0]
  return(result);
 8001508:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800150c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	095b      	lsrs	r3, r3, #5
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d104      	bne.n	800152c <HAL_RCC_OscConfig+0xc4c>
 8001522:	4b01      	ldr	r3, [pc, #4]	; (8001528 <HAL_RCC_OscConfig+0xc48>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xc84>
 8001528:	40021000 	.word	0x40021000
 800152c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fa93 f2a3 	rbit	r2, r3
 8001540:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800154a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fa93 f2a3 	rbit	r2, r3
 800155a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <HAL_RCC_OscConfig+0xdd8>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001568:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800156c:	6011      	str	r1, [r2, #0]
 800156e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	fa92 f1a2 	rbit	r1, r2
 8001578:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800157c:	6011      	str	r1, [r2, #0]
  return(result);
 800157e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	fab2 f282 	clz	r2, r2
 8001588:	b252      	sxtb	r2, r2
 800158a:	f042 0220 	orr.w	r2, r2, #32
 800158e:	b252      	sxtb	r2, r2
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	f002 021f 	and.w	r2, r2, #31
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d09b      	beq.n	80014da <HAL_RCC_OscConfig+0xbfa>
 80015a2:	e083      	b.n	80016ac <HAL_RCC_OscConfig+0xdcc>
 80015a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	fa93 f2a3 	rbit	r2, r3
 80015b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015bc:	601a      	str	r2, [r3, #0]
  return(result);
 80015be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	461a      	mov	r2, r3
 80015d4:	2300      	movs	r3, #0
 80015d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7fe fe5c 	bl	8000294 <HAL_GetTick>
 80015dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e2:	f7fe fe57 	bl	8000294 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e05b      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
 80015f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fa93 f2a3 	rbit	r2, r3
 800160a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160e:	601a      	str	r2, [r3, #0]
  return(result);
 8001610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001614:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	095b      	lsrs	r3, r3, #5
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d102      	bne.n	8001630 <HAL_RCC_OscConfig+0xd50>
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_RCC_OscConfig+0xdd8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	e01b      	b.n	8001668 <HAL_RCC_OscConfig+0xd88>
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	fa93 f2a3 	rbit	r2, r3
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	fa93 f2a3 	rbit	r2, r3
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_RCC_OscConfig+0xdd8>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f107 0214 	add.w	r2, r7, #20
 800166c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001670:	6011      	str	r1, [r2, #0]
 8001672:	f107 0214 	add.w	r2, r7, #20
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	fa92 f1a2 	rbit	r1, r2
 800167c:	f107 0210 	add.w	r2, r7, #16
 8001680:	6011      	str	r1, [r2, #0]
  return(result);
 8001682:	f107 0210 	add.w	r2, r7, #16
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	fab2 f282 	clz	r2, r2
 800168c:	b252      	sxtb	r2, r2
 800168e:	f042 0220 	orr.w	r2, r2, #32
 8001692:	b252      	sxtb	r2, r2
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	f002 021f 	and.w	r2, r2, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d19d      	bne.n	80015e2 <HAL_RCC_OscConfig+0xd02>
 80016a6:	e001      	b.n	80016ac <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000

080016bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b09e      	sub	sp, #120	; 0x78
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e164      	b.n	800199e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b92      	ldr	r3, [pc, #584]	; (8001920 <HAL_RCC_ClockConfig+0x264>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0207 	and.w	r2, r3, #7
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d210      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	498f      	ldr	r1, [pc, #572]	; (8001920 <HAL_RCC_ClockConfig+0x264>)
 80016e4:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <HAL_RCC_ClockConfig+0x264>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 0207 	bic.w	r2, r3, #7
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <HAL_RCC_ClockConfig+0x264>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0207 	and.w	r2, r3, #7
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e14c      	b.n	800199e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4984      	ldr	r1, [pc, #528]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 8001712:	4b84      	ldr	r3, [pc, #528]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80df 	beq.w	80018ee <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d13d      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf8>
 8001738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d102      	bne.n	8001762 <HAL_RCC_ClockConfig+0xa6>
 800175c:	4b71      	ldr	r3, [pc, #452]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	e00f      	b.n	8001782 <HAL_RCC_ClockConfig+0xc6>
 8001762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001766:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	667b      	str	r3, [r7, #100]	; 0x64
 8001770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001774:	663b      	str	r3, [r7, #96]	; 0x60
 8001776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800177e:	4b69      	ldr	r3, [pc, #420]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001786:	65ba      	str	r2, [r7, #88]	; 0x58
 8001788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800178a:	fa92 f2a2 	rbit	r2, r2
 800178e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001790:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001792:	fab2 f282 	clz	r2, r2
 8001796:	b252      	sxtb	r2, r2
 8001798:	f042 0220 	orr.w	r2, r2, #32
 800179c:	b252      	sxtb	r2, r2
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	f002 021f 	and.w	r2, r2, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d17d      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0f4      	b.n	800199e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d13d      	bne.n	8001838 <HAL_RCC_ClockConfig+0x17c>
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80017ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x12a>
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e00f      	b.n	8001806 <HAL_RCC_ClockConfig+0x14a>
 80017e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44
 80017f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f8:	643b      	str	r3, [r7, #64]	; 0x40
 80017fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001802:	4b48      	ldr	r3, [pc, #288]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800180a:	63ba      	str	r2, [r7, #56]	; 0x38
 800180c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800180e:	fa92 f2a2 	rbit	r2, r2
 8001812:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001816:	fab2 f282 	clz	r2, r2
 800181a:	b252      	sxtb	r2, r2
 800181c:	f042 0220 	orr.w	r2, r2, #32
 8001820:	b252      	sxtb	r2, r2
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	f002 021f 	and.w	r2, r2, #31
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d13b      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0b2      	b.n	800199e <HAL_RCC_ClockConfig+0x2e2>
 8001838:	2302      	movs	r3, #2
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	fab3 f383 	clz	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <HAL_RCC_ClockConfig+0x1a4>
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	e00d      	b.n	800187c <HAL_RCC_ClockConfig+0x1c0>
 8001860:	2302      	movs	r3, #2
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	2302      	movs	r3, #2
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	2202      	movs	r2, #2
 800187e:	61ba      	str	r2, [r7, #24]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	fa92 f2a2 	rbit	r2, r2
 8001886:	617a      	str	r2, [r7, #20]
  return(result);
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	fab2 f282 	clz	r2, r2
 800188e:	b252      	sxtb	r2, r2
 8001890:	f042 0220 	orr.w	r2, r2, #32
 8001894:	b252      	sxtb	r2, r2
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f002 021f 	and.w	r2, r2, #31
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e078      	b.n	800199e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ac:	491d      	ldr	r1, [pc, #116]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018be:	f7fe fce9 	bl	8000294 <HAL_GetTick>
 80018c2:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c6:	f7fe fce5 	bl	8000294 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e060      	b.n	800199e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_RCC_ClockConfig+0x268>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 020c 	and.w	r2, r3, #12
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d1eb      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_ClockConfig+0x264>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0207 	and.w	r2, r3, #7
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d915      	bls.n	8001928 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fc:	4908      	ldr	r1, [pc, #32]	; (8001920 <HAL_RCC_ClockConfig+0x264>)
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_RCC_ClockConfig+0x264>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0207 	bic.w	r2, r3, #7
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_RCC_ClockConfig+0x264>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0207 	and.w	r2, r3, #7
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d006      	beq.n	8001928 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e03f      	b.n	800199e <HAL_RCC_ClockConfig+0x2e2>
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000
 8001924:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	491c      	ldr	r1, [pc, #112]	; (80019a8 <HAL_RCC_ClockConfig+0x2ec>)
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_RCC_ClockConfig+0x2ec>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001952:	4915      	ldr	r1, [pc, #84]	; (80019a8 <HAL_RCC_ClockConfig+0x2ec>)
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_RCC_ClockConfig+0x2ec>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001966:	f000 f825 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 800196a:	4601      	mov	r1, r0
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_RCC_ClockConfig+0x2ec>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001974:	23f0      	movs	r3, #240	; 0xf0
 8001976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_RCC_ClockConfig+0x2f0>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	fa21 f303 	lsr.w	r3, r1, r3
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_RCC_ClockConfig+0x2f4>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001996:	200f      	movs	r0, #15
 8001998:	f7fe fc38 	bl	800020c <HAL_InitTick>
  
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3778      	adds	r7, #120	; 0x78
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	080051cc 	.word	0x080051cc
 80019b0:	20000014 	.word	0x20000014

080019b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x30>
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x36>
 80019e2:	e03f      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 80019e6:	623b      	str	r3, [r7, #32]
      break;
 80019e8:	e03f      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019f0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80019f4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	607b      	str	r3, [r7, #4]
  return(result);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	f003 020f 	and.w	r2, r3, #15
 8001a16:	230f      	movs	r3, #15
 8001a18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001a3c:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	e007      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	623b      	str	r3, [r7, #32]
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a66:	623b      	str	r3, [r7, #32]
      break;
 8001a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	372c      	adds	r7, #44	; 0x2c
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	007a1200 	.word	0x007a1200
 8001a80:	080051ac 	.word	0x080051ac
 8001a84:	080051bc 	.word	0x080051bc

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000014 	.word	0x20000014

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001aa6:	f7ff ffef 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aaa:	4601      	mov	r1, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ab4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ab8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	603b      	str	r3, [r7, #0]
  return(result);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	080051dc 	.word	0x080051dc

08001ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001aea:	f7ff ffcd 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aee:	4601      	mov	r1, r0
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001af8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001afc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	603b      	str	r3, [r7, #0]
  return(result);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	080051dc 	.word	0x080051dc

08001b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b092      	sub	sp, #72	; 0x48
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80d6 	beq.w	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10e      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	4a4a      	ldr	r2, [pc, #296]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	61d3      	str	r3, [r2, #28]
 8001b64:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b84:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7fe fb81 	bl	8000294 <HAL_GetTick>
 8001b92:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e008      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7fe fb7d 	bl	8000294 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1d4      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8083 	beq.w	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d07b      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c26:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d04c      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe fb2f 	bl	8000294 <HAL_GetTick>
 8001c36:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7fe fb2b 	bl	8000294 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e180      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001c50:	2302      	movs	r3, #2
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c68:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001c7e:	4b01      	ldr	r3, [pc, #4]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	e00d      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	10908100 	.word	0x10908100
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	4b9c      	ldr	r3, [pc, #624]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	613a      	str	r2, [r7, #16]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	fa92 f2a2 	rbit	r2, r2
 8001caa:	60fa      	str	r2, [r7, #12]
  return(result);
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b252      	sxtb	r2, r2
 8001cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb8:	b252      	sxtb	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0b6      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ccc:	4990      	ldr	r1, [pc, #576]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cce:	4b90      	ldr	r3, [pc, #576]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4a8a      	ldr	r2, [pc, #552]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ce8:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cfe:	4984      	ldr	r1, [pc, #528]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d00:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f023 0203 	bic.w	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d1c:	497c      	ldr	r1, [pc, #496]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d1e:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d3a:	4975      	ldr	r1, [pc, #468]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d3c:	4b74      	ldr	r3, [pc, #464]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d58:	496d      	ldr	r1, [pc, #436]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f023 0210 	bic.w	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001d76:	4966      	ldr	r1, [pc, #408]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d78:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d94:	495e      	ldr	r1, [pc, #376]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d96:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f023 0220 	bic.w	r2, r3, #32
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001db2:	4957      	ldr	r1, [pc, #348]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001db4:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dd0:	494f      	ldr	r1, [pc, #316]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dd2:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dee:	4948      	ldr	r1, [pc, #288]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001df0:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e0c:	4940      	ldr	r1, [pc, #256]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001e2a:	4939      	ldr	r1, [pc, #228]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001e48:	4931      	ldr	r1, [pc, #196]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	4313      	orrs	r3, r2
 8001e58:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e66:	492a      	ldr	r1, [pc, #168]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	4313      	orrs	r3, r2
 8001e76:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001e84:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4313      	orrs	r3, r2
 8001e94:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d008      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001ea2:	491b      	ldr	r1, [pc, #108]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001ec0:	4913      	ldr	r1, [pc, #76]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001ede:	490c      	ldr	r1, [pc, #48]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	4313      	orrs	r3, r2
 8001eee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001efc:	4904      	ldr	r1, [pc, #16]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	630b      	str	r3, [r1, #48]	; 0x30
 8001f0e:	e001      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8001f10:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001f20:	490e      	ldr	r1, [pc, #56]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001f3e:	4907      	ldr	r1, [pc, #28]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3748      	adds	r7, #72	; 0x48
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000

08001f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e043      	b.n	8001ffa <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f002 fff0 	bl	8004f6c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f9f9 	bl	800239c <UART_SetConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e022      	b.n	8001ffa <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fbeb 	bl	8002798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	6852      	ldr	r2, [r2, #4]
 8001fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	6892      	ldr	r2, [r2, #8]
 8001fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fc72 	bl	80028dc <UART_CheckIdleState>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b088      	sub	sp, #32
 8002006:	af02      	add	r7, sp, #8
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	d177      	bne.n	8002112 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_UART_Transmit+0x2c>
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e070      	b.n	8002114 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_UART_Transmit+0x3e>
 800203c:	2302      	movs	r3, #2
 800203e:	e069      	b.n	8002114 <HAL_UART_Transmit+0x112>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2221      	movs	r2, #33	; 0x21
 8002052:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002056:	f7fe f91d 	bl	8000294 <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	88fa      	ldrh	r2, [r7, #6]
 8002060:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800206c:	e034      	b.n	80020d8 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2200      	movs	r2, #0
 8002088:	2180      	movs	r1, #128	; 0x80
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fc6f 	bl	800296e <UART_WaitOnFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e03c      	b.n	8002114 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a2:	d111      	bne.n	80020c8 <HAL_UART_Transmit+0xc6>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10d      	bne.n	80020c8 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	8812      	ldrh	r2, [r2, #0]
 80020b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020bc:	b292      	uxth	r2, r2
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3302      	adds	r3, #2
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	e007      	b.n	80020d8 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1c4      	bne.n	800206e <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2140      	movs	r1, #64	; 0x40
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fc3d 	bl	800296e <UART_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e00a      	b.n	8002114 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e000      	b.n	8002114 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002112:	2302      	movs	r3, #2
  }
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10d      	bne.n	800215e <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_UART_IRQHandler+0x42>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fcf7 	bl	8002b4a <UART_Receive_IT>
      return;
 800215c:	e0fa      	b.n	8002354 <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80ba 	beq.w	80022e2 <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80af 	beq.w	80022e2 <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00e      	beq.n	80021ac <HAL_UART_IRQHandler+0x90>
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2201      	movs	r2, #1
 800219e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00e      	beq.n	80021d4 <HAL_UART_IRQHandler+0xb8>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2202      	movs	r2, #2
 80021c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00e      	beq.n	80021fc <HAL_UART_IRQHandler+0xe0>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2204      	movs	r2, #4
 80021ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f4:	f043 0202 	orr.w	r2, r3, #2
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d013      	beq.n	800222e <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2208      	movs	r2, #8
 8002220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002226:	f043 0208 	orr.w	r2, r3, #8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 808d 	beq.w	8002352 <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_UART_IRQHandler+0x136>
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fc7c 	bl	8002b4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d131      	bne.n	80022d0 <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fbc8 	bl	8002a02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	d123      	bne.n	80022c8 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	6892      	ldr	r2, [r2, #8]
 800228a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HAL_UART_IRQHandler+0x240>)
 800229e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f90c 	bl	80004c2 <HAL_DMA_Abort_IT>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d016      	beq.n	80022de <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80022ba:	4610      	mov	r0, r2
 80022bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022be:	e00e      	b.n	80022de <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f861 	bl	8002388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c6:	e00a      	b.n	80022de <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f85d 	bl	8002388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ce:	e006      	b.n	80022de <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f859 	bl	8002388 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80022dc:	e039      	b.n	8002352 <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022de:	bf00      	nop
    return;
 80022e0:	e037      	b.n	8002352 <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <HAL_UART_IRQHandler+0x1fc>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022fe:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fc84 	bl	8002c1e <HAL_UARTEx_WakeupCallback>
    return;
 8002316:	e01d      	b.n	8002354 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_UART_IRQHandler+0x218>
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fb9c 	bl	8002a6a <UART_Transmit_IT>
    return;
 8002332:	e00f      	b.n	8002354 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_UART_IRQHandler+0x238>
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fbe6 	bl	8002b1a <UART_EndTransmit_IT>
    return;
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <HAL_UART_IRQHandler+0x238>
    return;
 8002352:	bf00      	nop
  }

}
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	08002a3f 	.word	0x08002a3f

08002360 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80023a8:	2310      	movs	r3, #16
 80023aa:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	4ba6      	ldr	r3, [pc, #664]	; (8002674 <UART_SetConfig+0x2d8>)
 80023dc:	400b      	ands	r3, r1
 80023de:	68f9      	ldr	r1, [r7, #12]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	6852      	ldr	r2, [r2, #4]
 80023ee:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68d2      	ldr	r2, [r2, #12]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	6892      	ldr	r2, [r2, #8]
 8002410:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a96      	ldr	r2, [pc, #600]	; (8002678 <UART_SetConfig+0x2dc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d121      	bne.n	8002468 <UART_SetConfig+0xcc>
 8002424:	4b95      	ldr	r3, [pc, #596]	; (800267c <UART_SetConfig+0x2e0>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b03      	cmp	r3, #3
 800242e:	d817      	bhi.n	8002460 <UART_SetConfig+0xc4>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <UART_SetConfig+0x9c>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	08002455 	.word	0x08002455
 8002440:	0800245b 	.word	0x0800245b
 8002444:	0800244f 	.word	0x0800244f
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
 800244c:	e0b2      	b.n	80025b4 <UART_SetConfig+0x218>
 800244e:	2302      	movs	r3, #2
 8002450:	75fb      	strb	r3, [r7, #23]
 8002452:	e0af      	b.n	80025b4 <UART_SetConfig+0x218>
 8002454:	2304      	movs	r3, #4
 8002456:	75fb      	strb	r3, [r7, #23]
 8002458:	e0ac      	b.n	80025b4 <UART_SetConfig+0x218>
 800245a:	2308      	movs	r3, #8
 800245c:	75fb      	strb	r3, [r7, #23]
 800245e:	e0a9      	b.n	80025b4 <UART_SetConfig+0x218>
 8002460:	2310      	movs	r3, #16
 8002462:	75fb      	strb	r3, [r7, #23]
 8002464:	bf00      	nop
 8002466:	e0a5      	b.n	80025b4 <UART_SetConfig+0x218>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a84      	ldr	r2, [pc, #528]	; (8002680 <UART_SetConfig+0x2e4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d123      	bne.n	80024ba <UART_SetConfig+0x11e>
 8002472:	4b82      	ldr	r3, [pc, #520]	; (800267c <UART_SetConfig+0x2e0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800247a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247e:	d012      	beq.n	80024a6 <UART_SetConfig+0x10a>
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d802      	bhi.n	800248c <UART_SetConfig+0xf0>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <UART_SetConfig+0xfe>
 800248a:	e012      	b.n	80024b2 <UART_SetConfig+0x116>
 800248c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002490:	d00c      	beq.n	80024ac <UART_SetConfig+0x110>
 8002492:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002496:	d003      	beq.n	80024a0 <UART_SetConfig+0x104>
 8002498:	e00b      	b.n	80024b2 <UART_SetConfig+0x116>
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]
 800249e:	e089      	b.n	80025b4 <UART_SetConfig+0x218>
 80024a0:	2302      	movs	r3, #2
 80024a2:	75fb      	strb	r3, [r7, #23]
 80024a4:	e086      	b.n	80025b4 <UART_SetConfig+0x218>
 80024a6:	2304      	movs	r3, #4
 80024a8:	75fb      	strb	r3, [r7, #23]
 80024aa:	e083      	b.n	80025b4 <UART_SetConfig+0x218>
 80024ac:	2308      	movs	r3, #8
 80024ae:	75fb      	strb	r3, [r7, #23]
 80024b0:	e080      	b.n	80025b4 <UART_SetConfig+0x218>
 80024b2:	2310      	movs	r3, #16
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	bf00      	nop
 80024b8:	e07c      	b.n	80025b4 <UART_SetConfig+0x218>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a71      	ldr	r2, [pc, #452]	; (8002684 <UART_SetConfig+0x2e8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d123      	bne.n	800250c <UART_SetConfig+0x170>
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <UART_SetConfig+0x2e0>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80024cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024d0:	d012      	beq.n	80024f8 <UART_SetConfig+0x15c>
 80024d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024d6:	d802      	bhi.n	80024de <UART_SetConfig+0x142>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <UART_SetConfig+0x150>
 80024dc:	e012      	b.n	8002504 <UART_SetConfig+0x168>
 80024de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024e2:	d00c      	beq.n	80024fe <UART_SetConfig+0x162>
 80024e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024e8:	d003      	beq.n	80024f2 <UART_SetConfig+0x156>
 80024ea:	e00b      	b.n	8002504 <UART_SetConfig+0x168>
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]
 80024f0:	e060      	b.n	80025b4 <UART_SetConfig+0x218>
 80024f2:	2302      	movs	r3, #2
 80024f4:	75fb      	strb	r3, [r7, #23]
 80024f6:	e05d      	b.n	80025b4 <UART_SetConfig+0x218>
 80024f8:	2304      	movs	r3, #4
 80024fa:	75fb      	strb	r3, [r7, #23]
 80024fc:	e05a      	b.n	80025b4 <UART_SetConfig+0x218>
 80024fe:	2308      	movs	r3, #8
 8002500:	75fb      	strb	r3, [r7, #23]
 8002502:	e057      	b.n	80025b4 <UART_SetConfig+0x218>
 8002504:	2310      	movs	r3, #16
 8002506:	75fb      	strb	r3, [r7, #23]
 8002508:	bf00      	nop
 800250a:	e053      	b.n	80025b4 <UART_SetConfig+0x218>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5d      	ldr	r2, [pc, #372]	; (8002688 <UART_SetConfig+0x2ec>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d123      	bne.n	800255e <UART_SetConfig+0x1c2>
 8002516:	4b59      	ldr	r3, [pc, #356]	; (800267c <UART_SetConfig+0x2e0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800251e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002522:	d012      	beq.n	800254a <UART_SetConfig+0x1ae>
 8002524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002528:	d802      	bhi.n	8002530 <UART_SetConfig+0x194>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <UART_SetConfig+0x1a2>
 800252e:	e012      	b.n	8002556 <UART_SetConfig+0x1ba>
 8002530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002534:	d00c      	beq.n	8002550 <UART_SetConfig+0x1b4>
 8002536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800253a:	d003      	beq.n	8002544 <UART_SetConfig+0x1a8>
 800253c:	e00b      	b.n	8002556 <UART_SetConfig+0x1ba>
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]
 8002542:	e037      	b.n	80025b4 <UART_SetConfig+0x218>
 8002544:	2302      	movs	r3, #2
 8002546:	75fb      	strb	r3, [r7, #23]
 8002548:	e034      	b.n	80025b4 <UART_SetConfig+0x218>
 800254a:	2304      	movs	r3, #4
 800254c:	75fb      	strb	r3, [r7, #23]
 800254e:	e031      	b.n	80025b4 <UART_SetConfig+0x218>
 8002550:	2308      	movs	r3, #8
 8002552:	75fb      	strb	r3, [r7, #23]
 8002554:	e02e      	b.n	80025b4 <UART_SetConfig+0x218>
 8002556:	2310      	movs	r3, #16
 8002558:	75fb      	strb	r3, [r7, #23]
 800255a:	bf00      	nop
 800255c:	e02a      	b.n	80025b4 <UART_SetConfig+0x218>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a4a      	ldr	r2, [pc, #296]	; (800268c <UART_SetConfig+0x2f0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d123      	bne.n	80025b0 <UART_SetConfig+0x214>
 8002568:	4b44      	ldr	r3, [pc, #272]	; (800267c <UART_SetConfig+0x2e0>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002574:	d012      	beq.n	800259c <UART_SetConfig+0x200>
 8002576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800257a:	d802      	bhi.n	8002582 <UART_SetConfig+0x1e6>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <UART_SetConfig+0x1f4>
 8002580:	e012      	b.n	80025a8 <UART_SetConfig+0x20c>
 8002582:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002586:	d00c      	beq.n	80025a2 <UART_SetConfig+0x206>
 8002588:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800258c:	d003      	beq.n	8002596 <UART_SetConfig+0x1fa>
 800258e:	e00b      	b.n	80025a8 <UART_SetConfig+0x20c>
 8002590:	2300      	movs	r3, #0
 8002592:	75fb      	strb	r3, [r7, #23]
 8002594:	e00e      	b.n	80025b4 <UART_SetConfig+0x218>
 8002596:	2302      	movs	r3, #2
 8002598:	75fb      	strb	r3, [r7, #23]
 800259a:	e00b      	b.n	80025b4 <UART_SetConfig+0x218>
 800259c:	2304      	movs	r3, #4
 800259e:	75fb      	strb	r3, [r7, #23]
 80025a0:	e008      	b.n	80025b4 <UART_SetConfig+0x218>
 80025a2:	2308      	movs	r3, #8
 80025a4:	75fb      	strb	r3, [r7, #23]
 80025a6:	e005      	b.n	80025b4 <UART_SetConfig+0x218>
 80025a8:	2310      	movs	r3, #16
 80025aa:	75fb      	strb	r3, [r7, #23]
 80025ac:	bf00      	nop
 80025ae:	e001      	b.n	80025b4 <UART_SetConfig+0x218>
 80025b0:	2310      	movs	r3, #16
 80025b2:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025bc:	d17d      	bne.n	80026ba <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d865      	bhi.n	8002690 <UART_SetConfig+0x2f4>
 80025c4:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <UART_SetConfig+0x230>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	080025f1 	.word	0x080025f1
 80025d0:	0800260d 	.word	0x0800260d
 80025d4:	08002629 	.word	0x08002629
 80025d8:	08002691 	.word	0x08002691
 80025dc:	08002643 	.word	0x08002643
 80025e0:	08002691 	.word	0x08002691
 80025e4:	08002691 	.word	0x08002691
 80025e8:	08002691 	.word	0x08002691
 80025ec:	0800265f 	.word	0x0800265f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025f0:	f7ff fa56 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80025f4:	4603      	mov	r3, r0
 80025f6:	005a      	lsls	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	441a      	add	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	82bb      	strh	r3, [r7, #20]
        break;
 800260a:	e044      	b.n	8002696 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800260c:	f7ff fa6a 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 8002610:	4603      	mov	r3, r0
 8002612:	005a      	lsls	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	441a      	add	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	82bb      	strh	r3, [r7, #20]
        break;
 8002626:	e036      	b.n	8002696 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002632:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6852      	ldr	r2, [r2, #4]
 800263a:	fbb3 f3f2 	udiv	r3, r3, r2
 800263e:	82bb      	strh	r3, [r7, #20]
        break;
 8002640:	e029      	b.n	8002696 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002642:	f7ff f9b7 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8002646:	4603      	mov	r3, r0
 8002648:	005a      	lsls	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	82bb      	strh	r3, [r7, #20]
        break;
 800265c:	e01b      	b.n	8002696 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	82bb      	strh	r3, [r7, #20]
        break;
 8002672:	e010      	b.n	8002696 <UART_SetConfig+0x2fa>
 8002674:	efff69f3 	.word	0xefff69f3
 8002678:	40013800 	.word	0x40013800
 800267c:	40021000 	.word	0x40021000
 8002680:	40004400 	.word	0x40004400
 8002684:	40004800 	.word	0x40004800
 8002688:	40004c00 	.word	0x40004c00
 800268c:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	74fb      	strb	r3, [r7, #19]
        break;
 8002694:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002696:	8abb      	ldrh	r3, [r7, #20]
 8002698:	f023 030f 	bic.w	r3, r3, #15
 800269c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800269e:	8abb      	ldrh	r3, [r7, #20]
 80026a0:	105b      	asrs	r3, r3, #1
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	897a      	ldrh	r2, [r7, #10]
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	e069      	b.n	800278e <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d863      	bhi.n	8002788 <UART_SetConfig+0x3ec>
 80026c0:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <UART_SetConfig+0x32c>)
 80026c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c6:	bf00      	nop
 80026c8:	080026ed 	.word	0x080026ed
 80026cc:	0800270d 	.word	0x0800270d
 80026d0:	0800272d 	.word	0x0800272d
 80026d4:	08002789 	.word	0x08002789
 80026d8:	0800274d 	.word	0x0800274d
 80026dc:	08002789 	.word	0x08002789
 80026e0:	08002789 	.word	0x08002789
 80026e4:	08002789 	.word	0x08002789
 80026e8:	0800276d 	.word	0x0800276d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681c      	ldr	r4, [r3, #0]
 80026f0:	f7ff f9d6 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	441a      	add	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	b29b      	uxth	r3, r3
 8002708:	60e3      	str	r3, [r4, #12]
        break;
 800270a:	e040      	b.n	800278e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681c      	ldr	r4, [r3, #0]
 8002710:	f7ff f9e8 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 8002714:	4602      	mov	r2, r0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	441a      	add	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	b29b      	uxth	r3, r3
 8002728:	60e3      	str	r3, [r4, #12]
        break;
 800272a:	e030      	b.n	800278e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800273a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	6849      	ldr	r1, [r1, #4]
 8002742:	fbb3 f3f1 	udiv	r3, r3, r1
 8002746:	b29b      	uxth	r3, r3
 8002748:	60d3      	str	r3, [r2, #12]
        break;
 800274a:	e020      	b.n	800278e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681c      	ldr	r4, [r3, #0]
 8002750:	f7ff f930 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	b29b      	uxth	r3, r3
 8002768:	60e3      	str	r3, [r4, #12]
        break;
 800276a:	e010      	b.n	800278e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6852      	ldr	r2, [r2, #4]
 8002774:	0852      	lsrs	r2, r2, #1
 8002776:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6852      	ldr	r2, [r2, #4]
 800277e:	fbb1 f2f2 	udiv	r2, r1, r2
 8002782:	b292      	uxth	r2, r2
 8002784:	60da      	str	r2, [r3, #12]
        break;
 8002786:	e002      	b.n	800278e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	74fb      	strb	r3, [r7, #19]
        break;
 800278c:	bf00      	nop
    }
  }

  return ret;
 800278e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002790:	4618      	mov	r0, r3
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}

08002798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	6852      	ldr	r2, [r2, #4]
 80027b6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	6852      	ldr	r2, [r2, #4]
 80027d8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	6852      	ldr	r2, [r2, #4]
 80027fa:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	6852      	ldr	r2, [r2, #4]
 800281c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	6892      	ldr	r2, [r2, #8]
 800283e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	6892      	ldr	r2, [r2, #8]
 8002860:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002868:	430a      	orrs	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01a      	beq.n	80028ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	6852      	ldr	r2, [r2, #4]
 8002882:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002896:	d10a      	bne.n	80028ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	6852      	ldr	r2, [r2, #4]
 80028a2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	6852      	ldr	r2, [r2, #4]
 80028c4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  }
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028ee:	f7fd fcd1 	bl	8000294 <HAL_GetTick>
 80028f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d10e      	bne.n	8002920 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002902:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f82c 	bl	800296e <UART_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e022      	b.n	8002966 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b04      	cmp	r3, #4
 800292c:	d10e      	bne.n	800294c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800292e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f816 	bl	800296e <UART_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e00c      	b.n	8002966 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800297e:	e02c      	b.n	80029da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002986:	d028      	beq.n	80029da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0x30>
 800298e:	f7fd fc81 	bl	8000294 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	1ad2      	subs	r2, r2, r3
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	429a      	cmp	r2, r3
 800299c:	d91d      	bls.n	80029da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e00f      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69da      	ldr	r2, [r3, #28]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d0c3      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a18:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	6892      	ldr	r2, [r2, #8]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff fc93 	bl	8002388 <HAL_UART_ErrorCallback>
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b21      	cmp	r3, #33	; 0x21
 8002a7c:	d146      	bne.n	8002b0c <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d111      	bne.n	8002aae <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a98:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa8:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e02f      	b.n	8002b0e <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	d114      	bne.n	8002ae2 <UART_Transmit_IT+0x78>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d110      	bne.n	8002ae2 <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac4:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	1c9a      	adds	r2, r3, #2
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ae0:	e009      	b.n	8002af6 <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	1c58      	adds	r0, r3, #1
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	64c8      	str	r0, [r1, #76]	; 0x4c
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	8513      	strh	r3, [r2, #40]	; 0x28
      }
      huart->TxXferCount--;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b30:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff fc10 	bl	8002360 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b58:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b22      	cmp	r3, #34	; 0x22
 8002b64:	d14e      	bne.n	8002c04 <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b6c:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	d112      	bne.n	8002b9e <UART_Receive_IT+0x54>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10e      	bne.n	8002b9e <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002b86:	89ba      	ldrh	r2, [r7, #12]
 8002b88:	89fb      	ldrh	r3, [r7, #14]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
 8002b9c:	e00b      	b.n	8002bb6 <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	1c59      	adds	r1, r3, #1
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6551      	str	r1, [r2, #84]	; 0x54
 8002ba8:	89ba      	ldrh	r2, [r7, #12]
 8002baa:	b2d1      	uxtb	r1, r2
 8002bac:	89fa      	ldrh	r2, [r7, #14]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d118      	bne.n	8002c00 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fbbc 	bl	8002374 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e00a      	b.n	8002c16 <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e008      	b.n	8002c16 <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	6992      	ldr	r2, [r2, #24]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c44:	2b84      	cmp	r3, #132	; 0x84
 8002c46:	d005      	beq.n	8002c54 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002c48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3303      	adds	r3, #3
 8002c52:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002c54:	68fb      	ldr	r3, [r7, #12]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c66:	f001 f8a7 	bl	8003db8 <vTaskStartScheduler>
  
  return osOK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685c      	ldr	r4, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c86:	b29e      	uxth	r6, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ffcf 	bl	8002c32 <makeFreeRtosPriority>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f107 030c 	add.w	r3, r7, #12
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	4632      	mov	r2, r6
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f000 ff29 	bl	8003afc <xTaskCreate>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d001      	beq.n	8002cb4 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <osDelay+0x16>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	e000      	b.n	8002cd6 <osDelay+0x18>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 f83a 	bl	8003d50 <vTaskDelay>
  
  return osOK;
 8002cdc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f000 fcd8 	bl	80036b0 <xQueueGenericCreate>
 8002d00:	4603      	mov	r3, r0
#endif
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d0e:	f001 fc37 	bl	8004580 <xTaskGetSchedulerState>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d001      	beq.n	8002d1c <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002d18:	f000 fa46 	bl	80031a8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f103 0208 	add.w	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f103 0208 	add.w	r2, r3, #8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f103 0208 	add.w	r2, r3, #8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d103      	bne.n	8002de2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e00c      	b.n	8002dfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3308      	adds	r3, #8
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e002      	b.n	8002df0 <vListInsert+0x2e>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d9f6      	bls.n	8002dea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	601a      	str	r2, [r3, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6892      	ldr	r2, [r2, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6852      	ldr	r2, [r2, #4]
 8002e54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d103      	bne.n	8002e68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3b04      	subs	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b04      	subs	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 0201 	bic.w	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3b04      	subs	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002eb8:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <pxPortInitialiseStack+0x64>)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3b14      	subs	r3, #20
 8002ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3b04      	subs	r3, #4
 8002ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f06f 0202 	mvn.w	r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b20      	subs	r3, #32
 8002edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	08002ef1 	.word	0x08002ef1

08002ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <prvTaskExitError+0x38>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002efe:	d009      	beq.n	8002f14 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	e7fe      	b.n	8002f12 <prvTaskExitError+0x22>
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8002f26:	e7fe      	b.n	8002f26 <prvTaskExitError+0x36>
 8002f28:	20000008 	.word	0x20000008
 8002f2c:	00000000 	.word	0x00000000

08002f30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <pxCurrentTCBConst2>)
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	6808      	ldr	r0, [r1, #0]
 8002f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3a:	f380 8809 	msr	PSP, r0
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f04f 0000 	mov.w	r0, #0
 8002f46:	f380 8811 	msr	BASEPRI, r0
 8002f4a:	4770      	bx	lr
 8002f4c:	f3af 8000 	nop.w

08002f50 <pxCurrentTCBConst2>:
 8002f50:	20001854 	.word	0x20001854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop

08002f58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002f58:	4806      	ldr	r0, [pc, #24]	; (8002f74 <prvPortStartFirstTask+0x1c>)
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	6800      	ldr	r0, [r0, #0]
 8002f5e:	f380 8808 	msr	MSP, r0
 8002f62:	b662      	cpsie	i
 8002f64:	b661      	cpsie	f
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	df00      	svc	0
 8002f70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f72:	bf00      	nop
 8002f74:	e000ed08 	.word	0xe000ed08

08002f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <xPortStartScheduler+0xf4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a3b      	ldr	r2, [pc, #236]	; (8003070 <xPortStartScheduler+0xf8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d109      	bne.n	8002f9c <xPortStartScheduler+0x24>
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e7fe      	b.n	8002f9a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <xPortStartScheduler+0xf4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a34      	ldr	r2, [pc, #208]	; (8003074 <xPortStartScheduler+0xfc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d109      	bne.n	8002fba <xPortStartScheduler+0x42>
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e7fe      	b.n	8002fb8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <xPortStartScheduler+0x100>)
 8002fbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	22ff      	movs	r2, #255	; 0xff
 8002fca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4b27      	ldr	r3, [pc, #156]	; (800307c <xPortStartScheduler+0x104>)
 8002fe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <xPortStartScheduler+0x108>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fe8:	e009      	b.n	8002ffe <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002fea:	4b25      	ldr	r3, [pc, #148]	; (8003080 <xPortStartScheduler+0x108>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	4a23      	ldr	r2, [pc, #140]	; (8003080 <xPortStartScheduler+0x108>)
 8002ff2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b80      	cmp	r3, #128	; 0x80
 8003008:	d0ef      	beq.n	8002fea <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800300a:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <xPortStartScheduler+0x108>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <xPortStartScheduler+0x108>)
 8003012:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <xPortStartScheduler+0x108>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800301c:	4a18      	ldr	r2, [pc, #96]	; (8003080 <xPortStartScheduler+0x108>)
 800301e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003028:	4a16      	ldr	r2, [pc, #88]	; (8003084 <xPortStartScheduler+0x10c>)
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <xPortStartScheduler+0x10c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003032:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003034:	4a13      	ldr	r2, [pc, #76]	; (8003084 <xPortStartScheduler+0x10c>)
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <xPortStartScheduler+0x10c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800303e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003040:	f000 f8d2 	bl	80031e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <xPortStartScheduler+0x110>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800304a:	f000 f8e9 	bl	8003220 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <xPortStartScheduler+0x114>)
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <xPortStartScheduler+0x114>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003058:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800305a:	f7ff ff7d 	bl	8002f58 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800305e:	f7ff ff47 	bl	8002ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	e000ed00 	.word	0xe000ed00
 8003070:	410fc271 	.word	0x410fc271
 8003074:	410fc270 	.word	0x410fc270
 8003078:	e000e400 	.word	0xe000e400
 800307c:	20000034 	.word	0x20000034
 8003080:	20000038 	.word	0x20000038
 8003084:	e000ed20 	.word	0xe000ed20
 8003088:	20000008 	.word	0x20000008
 800308c:	e000ef34 	.word	0xe000ef34

08003090 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <vPortEnterCritical+0x54>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <vPortEnterCritical+0x54>)
 80030b0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <vPortEnterCritical+0x54>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10e      	bne.n	80030d8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <vPortEnterCritical+0x58>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <vPortEnterCritical+0x48>
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	e7fe      	b.n	80030d6 <vPortEnterCritical+0x46>
	}
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	20000008 	.word	0x20000008
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <vPortExitCritical+0x4c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <vPortExitCritical+0x22>
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	e7fe      	b.n	800310c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <vPortExitCritical+0x4c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3b01      	subs	r3, #1
 8003114:	4a08      	ldr	r2, [pc, #32]	; (8003138 <vPortExitCritical+0x4c>)
 8003116:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003118:	4b07      	ldr	r3, [pc, #28]	; (8003138 <vPortExitCritical+0x4c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <vPortExitCritical+0x3e>
 8003120:	2300      	movs	r3, #0
 8003122:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000008 	.word	0x20000008
 800313c:	00000000 	.word	0x00000000

08003140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003140:	f3ef 8009 	mrs	r0, PSP
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <pxCurrentTCBConst>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f01e 0f10 	tst.w	lr, #16
 8003150:	bf08      	it	eq
 8003152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315a:	6010      	str	r0, [r2, #0]
 800315c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003164:	f380 8811 	msr	BASEPRI, r0
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f000 ffce 	bl	8004110 <vTaskSwitchContext>
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f380 8811 	msr	BASEPRI, r0
 800317c:	bc08      	pop	{r3}
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	6808      	ldr	r0, [r1, #0]
 8003182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003186:	f01e 0f10 	tst.w	lr, #16
 800318a:	bf08      	it	eq
 800318c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003190:	f380 8809 	msr	PSP, r0
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	f3af 8000 	nop.w

080031a0 <pxCurrentTCBConst>:
 80031a0:	20001854 	.word	0x20001854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop

080031a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031c0:	f000 feea 	bl	8003f98 <xTaskIncrementTick>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <xPortSysTickHandler+0x3c>)
 80031cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	2300      	movs	r3, #0
 80031d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031ec:	4a08      	ldr	r2, [pc, #32]	; (8003210 <vPortSetupTimerInterrupt+0x28>)
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <vPortSetupTimerInterrupt+0x2c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4909      	ldr	r1, [pc, #36]	; (8003218 <vPortSetupTimerInterrupt+0x30>)
 80031f4:	fba1 1303 	umull	r1, r3, r1, r3
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	3b01      	subs	r3, #1
 80031fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <vPortSetupTimerInterrupt+0x34>)
 8003200:	2207      	movs	r2, #7
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000e014 	.word	0xe000e014
 8003214:	20000014 	.word	0x20000014
 8003218:	10624dd3 	.word	0x10624dd3
 800321c:	e000e010 	.word	0xe000e010

08003220 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003220:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003230 <vPortEnableVFP+0x10>
 8003224:	6801      	ldr	r1, [r0, #0]
 8003226:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800322a:	6001      	str	r1, [r0, #0]
 800322c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800322e:	bf00      	nop
 8003230:	e000ed88 	.word	0xe000ed88

08003234 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003240:	f000 fe00 	bl	8003e44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003244:	4b57      	ldr	r3, [pc, #348]	; (80033a4 <pvPortMalloc+0x170>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800324c:	f000 f90c 	bl	8003468 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003250:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <pvPortMalloc+0x174>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	f040 808c 	bne.w	8003376 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01c      	beq.n	800329e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003264:	2208      	movs	r2, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	2b00      	cmp	r3, #0
 8003274:	d013      	beq.n	800329e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f023 0307 	bic.w	r3, r3, #7
 800327c:	3308      	adds	r3, #8
 800327e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <pvPortMalloc+0x6a>
	__asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e7fe      	b.n	800329c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d068      	beq.n	8003376 <pvPortMalloc+0x142>
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <pvPortMalloc+0x178>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d863      	bhi.n	8003376 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80032ae:	4b40      	ldr	r3, [pc, #256]	; (80033b0 <pvPortMalloc+0x17c>)
 80032b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80032b2:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <pvPortMalloc+0x17c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032b8:	e004      	b.n	80032c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d203      	bcs.n	80032d6 <pvPortMalloc+0xa2>
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f1      	bne.n	80032ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <pvPortMalloc+0x170>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	429a      	cmp	r2, r3
 80032de:	d04a      	beq.n	8003376 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2208      	movs	r2, #8
 80032e6:	4413      	add	r3, r2
 80032e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	1ad2      	subs	r2, r2, r3
 80032fa:	2308      	movs	r3, #8
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	429a      	cmp	r2, r3
 8003300:	d91e      	bls.n	8003340 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <pvPortMalloc+0xf4>
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	e7fe      	b.n	8003326 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	1ad2      	subs	r2, r2, r3
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800333a:	69b8      	ldr	r0, [r7, #24]
 800333c:	f000 f8f6 	bl	800352c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <pvPortMalloc+0x178>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	4a18      	ldr	r2, [pc, #96]	; (80033ac <pvPortMalloc+0x178>)
 800334c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <pvPortMalloc+0x178>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <pvPortMalloc+0x180>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d203      	bcs.n	8003362 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800335a:	4b14      	ldr	r3, [pc, #80]	; (80033ac <pvPortMalloc+0x178>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <pvPortMalloc+0x180>)
 8003360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <pvPortMalloc+0x174>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	431a      	orrs	r2, r3
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003376:	f000 fd73 	bl	8003e60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <pvPortMalloc+0x164>
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e7fe      	b.n	8003396 <pvPortMalloc+0x162>
	return pvReturn;
 8003398:	69fb      	ldr	r3, [r7, #28]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3728      	adds	r7, #40	; 0x28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20001844 	.word	0x20001844
 80033a8:	20001850 	.word	0x20001850
 80033ac:	20001848 	.word	0x20001848
 80033b0:	2000183c 	.word	0x2000183c
 80033b4:	2000184c 	.word	0x2000184c

080033b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d046      	beq.n	8003458 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033ca:	2308      	movs	r3, #8
 80033cc:	425b      	negs	r3, r3
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4413      	add	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4b20      	ldr	r3, [pc, #128]	; (8003460 <vPortFree+0xa8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <vPortFree+0x42>
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e7fe      	b.n	80033f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <vPortFree+0x5e>
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	e7fe      	b.n	8003414 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <vPortFree+0xa8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d019      	beq.n	8003458 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d115      	bne.n	8003458 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <vPortFree+0xa8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800343c:	f000 fd02 	bl	8003e44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <vPortFree+0xac>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4413      	add	r3, r2
 800344a:	4a06      	ldr	r2, [pc, #24]	; (8003464 <vPortFree+0xac>)
 800344c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800344e:	6938      	ldr	r0, [r7, #16]
 8003450:	f000 f86c 	bl	800352c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003454:	f000 fd04 	bl	8003e60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003458:	bf00      	nop
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20001850 	.word	0x20001850
 8003464:	20001848 	.word	0x20001848

08003468 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800346e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003472:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003474:	4b27      	ldr	r3, [pc, #156]	; (8003514 <prvHeapInit+0xac>)
 8003476:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3307      	adds	r3, #7
 8003486:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0307 	bic.w	r3, r3, #7
 800348e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <prvHeapInit+0xac>)
 8003498:	4413      	add	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034a0:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <prvHeapInit+0xb0>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034a6:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <prvHeapInit+0xb0>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4413      	add	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034b4:	2208      	movs	r2, #8
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a15      	ldr	r2, [pc, #84]	; (800351c <prvHeapInit+0xb4>)
 80034c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80034ca:	4b14      	ldr	r3, [pc, #80]	; (800351c <prvHeapInit+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <prvHeapInit+0xb4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	1ad2      	subs	r2, r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <prvHeapInit+0xb4>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <prvHeapInit+0xb8>)
 80034f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a09      	ldr	r2, [pc, #36]	; (8003524 <prvHeapInit+0xbc>)
 80034fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <prvHeapInit+0xc0>)
 8003502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003506:	601a      	str	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	2000003c 	.word	0x2000003c
 8003518:	2000183c 	.word	0x2000183c
 800351c:	20001844 	.word	0x20001844
 8003520:	2000184c 	.word	0x2000184c
 8003524:	20001848 	.word	0x20001848
 8003528:	20001850 	.word	0x20001850

0800352c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <prvInsertBlockIntoFreeList+0xac>)
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e002      	b.n	8003540 <prvInsertBlockIntoFreeList+0x14>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d3f7      	bcc.n	800353a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d108      	bne.n	800356e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	441a      	add	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	441a      	add	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d118      	bne.n	80035b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <prvInsertBlockIntoFreeList+0xb0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d00d      	beq.n	80035aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e008      	b.n	80035bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <prvInsertBlockIntoFreeList+0xb0>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e003      	b.n	80035bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d002      	beq.n	80035ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	2000183c 	.word	0x2000183c
 80035dc:	20001844 	.word	0x20001844

080035e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <xQueueGenericReset+0x28>
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	e7fe      	b.n	8003606 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003608:	f7ff fd42 	bl	8003090 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	3b01      	subs	r3, #1
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	441a      	add	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	22ff      	movs	r2, #255	; 0xff
 800364c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	22ff      	movs	r2, #255	; 0xff
 8003654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d114      	bne.n	8003688 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01a      	beq.n	800369c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3310      	adds	r3, #16
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fdce 	bl	800420c <xTaskRemoveFromEventList>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <xQueueGenericReset+0xcc>)
 8003678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	e009      	b.n	800369c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3310      	adds	r3, #16
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fb47 	bl	8002d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3324      	adds	r3, #36	; 0x24
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fb42 	bl	8002d20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800369c:	f7ff fd26 	bl	80030ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036a0:	2301      	movs	r3, #1
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <xQueueGenericCreate+0x28>
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	e7fe      	b.n	80036d6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e004      	b.n	80036ee <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3348      	adds	r3, #72	; 0x48
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fd9e 	bl	8003234 <pvPortMalloc>
 80036f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	3348      	adds	r3, #72	; 0x48
 8003704:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003706:	79fa      	ldrb	r2, [r7, #7]
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f805 	bl	8003722 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8003718:	69bb      	ldr	r3, [r7, #24]
	}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e002      	b.n	8003744 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003750:	2101      	movs	r1, #1
 8003752:	69b8      	ldr	r0, [r7, #24]
 8003754:	f7ff ff44 	bl	80035e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <xQueueGenericSend+0x30>
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	e7fe      	b.n	800378e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <xQueueGenericSend+0x3e>
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <xQueueGenericSend+0x42>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <xQueueGenericSend+0x44>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <xQueueGenericSend+0x5c>
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	e7fe      	b.n	80037ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d103      	bne.n	80037ca <xQueueGenericSend+0x6a>
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <xQueueGenericSend+0x6e>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <xQueueGenericSend+0x70>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d109      	bne.n	80037e8 <xQueueGenericSend+0x88>
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	e7fe      	b.n	80037e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037e8:	f000 feca 	bl	8004580 <xTaskGetSchedulerState>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <xQueueGenericSend+0x98>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <xQueueGenericSend+0x9c>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <xQueueGenericSend+0x9e>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <xQueueGenericSend+0xb6>
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	e7fe      	b.n	8003814 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003816:	f7ff fc3b 	bl	8003090 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <xQueueGenericSend+0xcc>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d129      	bne.n	8003880 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003832:	f000 f88f 	bl	8003954 <prvCopyDataToQueue>
 8003836:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	3324      	adds	r3, #36	; 0x24
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fce1 	bl	800420c <xTaskRemoveFromEventList>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d013      	beq.n	8003878 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003850:	4b3f      	ldr	r3, [pc, #252]	; (8003950 <xQueueGenericSend+0x1f0>)
 8003852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	e00a      	b.n	8003878 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003868:	4b39      	ldr	r3, [pc, #228]	; (8003950 <xQueueGenericSend+0x1f0>)
 800386a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003878:	f7ff fc38 	bl	80030ec <vPortExitCritical>
				return pdPASS;
 800387c:	2301      	movs	r3, #1
 800387e:	e063      	b.n	8003948 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003886:	f7ff fc31 	bl	80030ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800388a:	2300      	movs	r3, #0
 800388c:	e05c      	b.n	8003948 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003894:	f107 0314 	add.w	r3, r7, #20
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fd19 	bl	80042d0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038a2:	f7ff fc23 	bl	80030ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038a6:	f000 facd 	bl	8003e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038aa:	f7ff fbf1 	bl	8003090 <vPortEnterCritical>
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ba:	d103      	bne.n	80038c4 <xQueueGenericSend+0x164>
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ca:	b25b      	sxtb	r3, r3
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d0:	d103      	bne.n	80038da <xQueueGenericSend+0x17a>
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038da:	f7ff fc07 	bl	80030ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038de:	1d3a      	adds	r2, r7, #4
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fd16 	bl	8004318 <xTaskCheckForTimeOut>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d124      	bne.n	800393c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038f4:	f000 f8ea 	bl	8003acc <prvIsQueueFull>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	3310      	adds	r3, #16
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fc5c 	bl	80041c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800390c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800390e:	f000 f88b 	bl	8003a28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003912:	f000 faa5 	bl	8003e60 <xTaskResumeAll>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	f47f af7c 	bne.w	8003816 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <xQueueGenericSend+0x1f0>)
 8003920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	e772      	b.n	8003816 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003932:	f000 f879 	bl	8003a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003936:	f000 fa93 	bl	8003e60 <xTaskResumeAll>
 800393a:	e76c      	b.n	8003816 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800393c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800393e:	f000 f873 	bl	8003a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003942:	f000 fa8d 	bl	8003e60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003946:	2300      	movs	r3, #0
		}
	}
}
 8003948:	4618      	mov	r0, r3
 800394a:	3738      	adds	r7, #56	; 0x38
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10d      	bne.n	800398e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d14d      	bne.n	8003a16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fe1c 	bl	80045bc <xTaskPriorityDisinherit>
 8003984:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	e043      	b.n	8003a16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d119      	bne.n	80039c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6898      	ldr	r0, [r3, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	461a      	mov	r2, r3
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	f001 fb74 	bl	800508c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	441a      	add	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d32b      	bcc.n	8003a16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	e026      	b.n	8003a16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68d8      	ldr	r0, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	461a      	mov	r2, r3
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	f001 fb5a 	bl	800508c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	425b      	negs	r3, r3
 80039e2:	441a      	add	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d207      	bcs.n	8003a04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	425b      	negs	r3, r3
 80039fe:	441a      	add	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d105      	bne.n	8003a16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a1e:	697b      	ldr	r3, [r7, #20]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a30:	f7ff fb2e 	bl	8003090 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a3c:	e011      	b.n	8003a62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d012      	beq.n	8003a6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3324      	adds	r3, #36	; 0x24
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fbde 	bl	800420c <xTaskRemoveFromEventList>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a56:	f000 fcbd 	bl	80043d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	dce9      	bgt.n	8003a3e <prvUnlockQueue+0x16>
 8003a6a:	e000      	b.n	8003a6e <prvUnlockQueue+0x46>
					break;
 8003a6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	22ff      	movs	r2, #255	; 0xff
 8003a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a76:	f7ff fb39 	bl	80030ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a7a:	f7ff fb09 	bl	8003090 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a86:	e011      	b.n	8003aac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3310      	adds	r3, #16
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fbb9 	bl	800420c <xTaskRemoveFromEventList>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003aa0:	f000 fc98 	bl	80043d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003aa4:	7bbb      	ldrb	r3, [r7, #14]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	dce9      	bgt.n	8003a88 <prvUnlockQueue+0x60>
 8003ab4:	e000      	b.n	8003ab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ac0:	f7ff fb14 	bl	80030ec <vPortExitCritical>
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ad4:	f7ff fadc 	bl	8003090 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d102      	bne.n	8003aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e001      	b.n	8003aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aee:	f7ff fafd 	bl	80030ec <vPortExitCritical>

	return xReturn;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fb8f 	bl	8003234 <pvPortMalloc>
 8003b16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b1e:	2054      	movs	r0, #84	; 0x54
 8003b20:	f7ff fb88 	bl	8003234 <pvPortMalloc>
 8003b24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
 8003b32:	e005      	b.n	8003b40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f7ff fc3f 	bl	80033b8 <vPortFree>
 8003b3a:	e001      	b.n	8003b40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9303      	str	r3, [sp, #12]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	9302      	str	r3, [sp, #8]
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f80e 	bl	8003b7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b62:	69f8      	ldr	r0, [r7, #28]
 8003b64:	f000 f88a 	bl	8003c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e002      	b.n	8003b74 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b74:	69bb      	ldr	r3, [r7, #24]
	}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b088      	sub	sp, #32
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b96:	3b01      	subs	r3, #1
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	f023 0307 	bic.w	r3, r3, #7
 8003ba4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <prvInitialiseNewTask+0x46>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e7fe      	b.n	8003bc2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e012      	b.n	8003bf0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	7819      	ldrb	r1, [r3, #0]
 8003bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3334      	adds	r3, #52	; 0x34
 8003bda:	460a      	mov	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3301      	adds	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b0f      	cmp	r3, #15
 8003bf4:	d9e9      	bls.n	8003bca <prvInitialiseNewTask+0x4c>
 8003bf6:	e000      	b.n	8003bfa <prvInitialiseNewTask+0x7c>
		{
			break;
 8003bf8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d901      	bls.n	8003c0c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c08:	2306      	movs	r3, #6
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	3304      	adds	r3, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f89c 	bl	8002d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff f897 	bl	8002d60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	f1c3 0207 	rsb	r2, r3, #7
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	69b8      	ldr	r0, [r7, #24]
 8003c5c:	f7ff f914 	bl	8002e88 <pxPortInitialiseStack>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c72:	bf00      	nop
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c84:	f7ff fa04 	bl	8003090 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c88:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <prvAddNewTaskToReadyList+0xb8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <prvAddNewTaskToReadyList+0xb8>)
 8003c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c92:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <prvAddNewTaskToReadyList+0xbc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c9a:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <prvAddNewTaskToReadyList+0xbc>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <prvAddNewTaskToReadyList+0xb8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d110      	bne.n	8003cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ca8:	f000 fbb8 	bl	800441c <prvInitialiseTaskLists>
 8003cac:	e00d      	b.n	8003cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cae:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <prvAddNewTaskToReadyList+0xc0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <prvAddNewTaskToReadyList+0xbc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d802      	bhi.n	8003cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cc4:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <prvAddNewTaskToReadyList+0xbc>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <prvAddNewTaskToReadyList+0xc4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <prvAddNewTaskToReadyList+0xc4>)
 8003cd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <prvAddNewTaskToReadyList+0xc8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <prvAddNewTaskToReadyList+0xc8>)
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <prvAddNewTaskToReadyList+0xcc>)
 8003cf4:	441a      	add	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7ff f83c 	bl	8002d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d02:	f7ff f9f3 	bl	80030ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <prvAddNewTaskToReadyList+0xc0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00e      	beq.n	8003d2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <prvAddNewTaskToReadyList+0xbc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d207      	bcs.n	8003d2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <prvAddNewTaskToReadyList+0xd0>)
 8003d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20001954 	.word	0x20001954
 8003d38:	20001854 	.word	0x20001854
 8003d3c:	20001960 	.word	0x20001960
 8003d40:	20001970 	.word	0x20001970
 8003d44:	2000195c 	.word	0x2000195c
 8003d48:	20001858 	.word	0x20001858
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d62:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <vTaskDelay+0x60>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <vTaskDelay+0x2e>
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	e7fe      	b.n	8003d7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d7e:	f000 f861 	bl	8003e44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d82:	2100      	movs	r1, #0
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fc9d 	bl	80046c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d8a:	f000 f869 	bl	8003e60 <xTaskResumeAll>
 8003d8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d107      	bne.n	8003da6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <vTaskDelay+0x64>)
 8003d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	2000197c 	.word	0x2000197c
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <vTaskStartScheduler+0x74>)
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2280      	movs	r2, #128	; 0x80
 8003dca:	4919      	ldr	r1, [pc, #100]	; (8003e30 <vTaskStartScheduler+0x78>)
 8003dcc:	4819      	ldr	r0, [pc, #100]	; (8003e34 <vTaskStartScheduler+0x7c>)
 8003dce:	f7ff fe95 	bl	8003afc <xTaskCreate>
 8003dd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d115      	bne.n	8003e06 <vTaskStartScheduler+0x4e>
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <vTaskStartScheduler+0x80>)
 8003dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <vTaskStartScheduler+0x84>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <vTaskStartScheduler+0x88>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e00:	f7ff f8ba 	bl	8002f78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e04:	e00d      	b.n	8003e22 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0c:	d109      	bne.n	8003e22 <vTaskStartScheduler+0x6a>
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	e7fe      	b.n	8003e20 <vTaskStartScheduler+0x68>
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20001978 	.word	0x20001978
 8003e30:	080050cc 	.word	0x080050cc
 8003e34:	080043ed 	.word	0x080043ed
 8003e38:	20001974 	.word	0x20001974
 8003e3c:	20001960 	.word	0x20001960
 8003e40:	20001958 	.word	0x20001958

08003e44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <vTaskSuspendAll+0x18>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	4a03      	ldr	r2, [pc, #12]	; (8003e5c <vTaskSuspendAll+0x18>)
 8003e50:	6013      	str	r3, [r2, #0]
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	2000197c 	.word	0x2000197c

08003e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <xTaskResumeAll+0x114>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <xTaskResumeAll+0x2a>
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	e7fe      	b.n	8003e88 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e8a:	f7ff f901 	bl	8003090 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e8e:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <xTaskResumeAll+0x114>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	4a37      	ldr	r2, [pc, #220]	; (8003f74 <xTaskResumeAll+0x114>)
 8003e96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e98:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <xTaskResumeAll+0x114>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d161      	bne.n	8003f64 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ea0:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <xTaskResumeAll+0x118>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05d      	beq.n	8003f64 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ea8:	e02e      	b.n	8003f08 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003eaa:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <xTaskResumeAll+0x11c>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe ffbc 	bl	8002e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fe ffb7 	bl	8002e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	2201      	movs	r2, #1
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <xTaskResumeAll+0x120>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <xTaskResumeAll+0x120>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4a27      	ldr	r2, [pc, #156]	; (8003f84 <xTaskResumeAll+0x124>)
 8003ee6:	441a      	add	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fe ff43 	bl	8002d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <xTaskResumeAll+0x128>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <xTaskResumeAll+0x12c>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f08:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <xTaskResumeAll+0x11c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1cc      	bne.n	8003eaa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f16:	f000 fb0d 	bl	8004534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <xTaskResumeAll+0x130>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f26:	f000 f837 	bl	8003f98 <xTaskIncrementTick>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <xTaskResumeAll+0x12c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f1      	bne.n	8003f26 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003f42:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <xTaskResumeAll+0x130>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <xTaskResumeAll+0x12c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <xTaskResumeAll+0x134>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f64:	f7ff f8c2 	bl	80030ec <vPortExitCritical>

	return xAlreadyYielded;
 8003f68:	68bb      	ldr	r3, [r7, #8]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	2000197c 	.word	0x2000197c
 8003f78:	20001954 	.word	0x20001954
 8003f7c:	20001914 	.word	0x20001914
 8003f80:	2000195c 	.word	0x2000195c
 8003f84:	20001858 	.word	0x20001858
 8003f88:	20001854 	.word	0x20001854
 8003f8c:	20001968 	.word	0x20001968
 8003f90:	20001964 	.word	0x20001964
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa2:	4b50      	ldr	r3, [pc, #320]	; (80040e4 <xTaskIncrementTick+0x14c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 808c 	bne.w	80040c4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003fac:	4b4e      	ldr	r3, [pc, #312]	; (80040e8 <xTaskIncrementTick+0x150>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fb4:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <xTaskIncrementTick+0x150>)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11f      	bne.n	8004000 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fc0:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <xTaskIncrementTick+0x154>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <xTaskIncrementTick+0x46>
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	e7fe      	b.n	8003fdc <xTaskIncrementTick+0x44>
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <xTaskIncrementTick+0x154>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	4b42      	ldr	r3, [pc, #264]	; (80040f0 <xTaskIncrementTick+0x158>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a40      	ldr	r2, [pc, #256]	; (80040ec <xTaskIncrementTick+0x154>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	4a40      	ldr	r2, [pc, #256]	; (80040f0 <xTaskIncrementTick+0x158>)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <xTaskIncrementTick+0x15c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <xTaskIncrementTick+0x15c>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	f000 fa9a 	bl	8004534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004000:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <xTaskIncrementTick+0x160>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	429a      	cmp	r2, r3
 8004008:	d34d      	bcc.n	80040a6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800400a:	4b38      	ldr	r3, [pc, #224]	; (80040ec <xTaskIncrementTick+0x154>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <xTaskIncrementTick+0x80>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <xTaskIncrementTick+0x82>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <xTaskIncrementTick+0x160>)
 8004020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004024:	601a      	str	r2, [r3, #0]
					break;
 8004026:	e03e      	b.n	80040a6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <xTaskIncrementTick+0x154>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	d203      	bcs.n	8004048 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004040:	4a2d      	ldr	r2, [pc, #180]	; (80040f8 <xTaskIncrementTick+0x160>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6013      	str	r3, [r2, #0]
						break;
 8004046:	e02e      	b.n	80040a6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3304      	adds	r3, #4
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fef1 	bl	8002e34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3318      	adds	r3, #24
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fee8 	bl	8002e34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2201      	movs	r2, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	4b23      	ldr	r3, [pc, #140]	; (80040fc <xTaskIncrementTick+0x164>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	4a22      	ldr	r2, [pc, #136]	; (80040fc <xTaskIncrementTick+0x164>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4a1f      	ldr	r2, [pc, #124]	; (8004100 <xTaskIncrementTick+0x168>)
 8004084:	441a      	add	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fe fe74 	bl	8002d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <xTaskIncrementTick+0x16c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	429a      	cmp	r2, r3
 800409e:	d3b4      	bcc.n	800400a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a4:	e7b1      	b.n	800400a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <xTaskIncrementTick+0x16c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ac:	4914      	ldr	r1, [pc, #80]	; (8004100 <xTaskIncrementTick+0x168>)
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d907      	bls.n	80040ce <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e004      	b.n	80040ce <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <xTaskIncrementTick+0x170>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a0f      	ldr	r2, [pc, #60]	; (8004108 <xTaskIncrementTick+0x170>)
 80040cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <xTaskIncrementTick+0x174>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80040d6:	2301      	movs	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040da:	697b      	ldr	r3, [r7, #20]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	2000197c 	.word	0x2000197c
 80040e8:	20001958 	.word	0x20001958
 80040ec:	2000190c 	.word	0x2000190c
 80040f0:	20001910 	.word	0x20001910
 80040f4:	2000196c 	.word	0x2000196c
 80040f8:	20001974 	.word	0x20001974
 80040fc:	2000195c 	.word	0x2000195c
 8004100:	20001858 	.word	0x20001858
 8004104:	20001854 	.word	0x20001854
 8004108:	20001964 	.word	0x20001964
 800410c:	20001968 	.word	0x20001968

08004110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004116:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <vTaskSwitchContext+0xa0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800411e:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <vTaskSwitchContext+0xa4>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004124:	e03e      	b.n	80041a4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <vTaskSwitchContext+0xa4>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800412c:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <vTaskSwitchContext+0xa8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	f1c3 031f 	rsb	r3, r3, #31
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	491e      	ldr	r1, [pc, #120]	; (80041bc <vTaskSwitchContext+0xac>)
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	e7fe      	b.n	8004168 <vTaskSwitchContext+0x58>
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <vTaskSwitchContext+0xac>)
 8004176:	4413      	add	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	3308      	adds	r3, #8
 800418c:	429a      	cmp	r2, r3
 800418e:	d104      	bne.n	800419a <vTaskSwitchContext+0x8a>
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <vTaskSwitchContext+0xb0>)
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	2000197c 	.word	0x2000197c
 80041b4:	20001968 	.word	0x20001968
 80041b8:	2000195c 	.word	0x2000195c
 80041bc:	20001858 	.word	0x20001858
 80041c0:	20001854 	.word	0x20001854

080041c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <vTaskPlaceOnEventList+0x24>
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e7fe      	b.n	80041e6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <vTaskPlaceOnEventList+0x44>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3318      	adds	r3, #24
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fe fde6 	bl	8002dc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041f6:	2101      	movs	r1, #1
 80041f8:	6838      	ldr	r0, [r7, #0]
 80041fa:	f000 fa63 	bl	80046c4 <prvAddCurrentTaskToDelayedList>
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20001854 	.word	0x20001854

0800420c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <xTaskRemoveFromEventList+0x2a>
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e7fe      	b.n	8004234 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	3318      	adds	r3, #24
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe fdfa 	bl	8002e34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <xTaskRemoveFromEventList+0xac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11c      	bne.n	8004282 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	3304      	adds	r3, #4
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe fdf1 	bl	8002e34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	2201      	movs	r2, #1
 8004258:	409a      	lsls	r2, r3
 800425a:	4b18      	ldr	r3, [pc, #96]	; (80042bc <xTaskRemoveFromEventList+0xb0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <xTaskRemoveFromEventList+0xb0>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <xTaskRemoveFromEventList+0xb4>)
 8004272:	441a      	add	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7fe fd7d 	bl	8002d7a <vListInsertEnd>
 8004280:	e005      	b.n	800428e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	3318      	adds	r3, #24
 8004286:	4619      	mov	r1, r3
 8004288:	480e      	ldr	r0, [pc, #56]	; (80042c4 <xTaskRemoveFromEventList+0xb8>)
 800428a:	f7fe fd76 	bl	8002d7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <xTaskRemoveFromEventList+0xbc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	429a      	cmp	r2, r3
 800429a:	d905      	bls.n	80042a8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <xTaskRemoveFromEventList+0xc0>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e001      	b.n	80042ac <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042ac:	697b      	ldr	r3, [r7, #20]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2000197c 	.word	0x2000197c
 80042bc:	2000195c 	.word	0x2000195c
 80042c0:	20001858 	.word	0x20001858
 80042c4:	20001914 	.word	0x20001914
 80042c8:	20001854 	.word	0x20001854
 80042cc:	20001968 	.word	0x20001968

080042d0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <vTaskSetTimeOutState+0x22>
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e7fe      	b.n	80042f0 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <vTaskSetTimeOutState+0x40>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <vTaskSetTimeOutState+0x44>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2000196c 	.word	0x2000196c
 8004314:	20001958 	.word	0x20001958

08004318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <xTaskCheckForTimeOut+0x24>
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e7fe      	b.n	800433a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <xTaskCheckForTimeOut+0x3e>
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	e7fe      	b.n	8004354 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004356:	f7fe fe9b 	bl	8003090 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800435a:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <xTaskCheckForTimeOut+0xb4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004368:	d102      	bne.n	8004370 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e026      	b.n	80043be <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <xTaskCheckForTimeOut+0xb8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d007      	beq.n	800438c <xTaskCheckForTimeOut+0x74>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	429a      	cmp	r2, r3
 8004384:	d802      	bhi.n	800438c <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e018      	b.n	80043be <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d20e      	bcs.n	80043ba <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1acb      	subs	r3, r1, r3
 80043a8:	441a      	add	r2, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff ff8e 	bl	80042d0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e001      	b.n	80043be <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80043be:	f7fe fe95 	bl	80030ec <vPortExitCritical>

	return xReturn;
 80043c2:	697b      	ldr	r3, [r7, #20]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20001958 	.word	0x20001958
 80043d0:	2000196c 	.word	0x2000196c

080043d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <vTaskMissedYield+0x14>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	20001968 	.word	0x20001968

080043ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043f4:	f000 f852 	bl	800449c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <prvIdleTask+0x28>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d9f9      	bls.n	80043f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <prvIdleTask+0x2c>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004410:	e7f0      	b.n	80043f4 <prvIdleTask+0x8>
 8004412:	bf00      	nop
 8004414:	20001858 	.word	0x20001858
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	e00c      	b.n	8004442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a12      	ldr	r2, [pc, #72]	; (800447c <prvInitialiseTaskLists+0x60>)
 8004434:	4413      	add	r3, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fc72 	bl	8002d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3301      	adds	r3, #1
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b06      	cmp	r3, #6
 8004446:	d9ef      	bls.n	8004428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004448:	480d      	ldr	r0, [pc, #52]	; (8004480 <prvInitialiseTaskLists+0x64>)
 800444a:	f7fe fc69 	bl	8002d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800444e:	480d      	ldr	r0, [pc, #52]	; (8004484 <prvInitialiseTaskLists+0x68>)
 8004450:	f7fe fc66 	bl	8002d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <prvInitialiseTaskLists+0x6c>)
 8004456:	f7fe fc63 	bl	8002d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800445a:	480c      	ldr	r0, [pc, #48]	; (800448c <prvInitialiseTaskLists+0x70>)
 800445c:	f7fe fc60 	bl	8002d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004460:	480b      	ldr	r0, [pc, #44]	; (8004490 <prvInitialiseTaskLists+0x74>)
 8004462:	f7fe fc5d 	bl	8002d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <prvInitialiseTaskLists+0x78>)
 8004468:	4a05      	ldr	r2, [pc, #20]	; (8004480 <prvInitialiseTaskLists+0x64>)
 800446a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvInitialiseTaskLists+0x7c>)
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <prvInitialiseTaskLists+0x68>)
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20001858 	.word	0x20001858
 8004480:	200018e4 	.word	0x200018e4
 8004484:	200018f8 	.word	0x200018f8
 8004488:	20001914 	.word	0x20001914
 800448c:	20001928 	.word	0x20001928
 8004490:	20001940 	.word	0x20001940
 8004494:	2000190c 	.word	0x2000190c
 8004498:	20001910 	.word	0x20001910

0800449c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a2:	e028      	b.n	80044f6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80044a4:	f7ff fcce 	bl	8003e44 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80044a8:	4b17      	ldr	r3, [pc, #92]	; (8004508 <prvCheckTasksWaitingTermination+0x6c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80044b8:	f7ff fcd2 	bl	8003e60 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d119      	bne.n	80044f6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80044c2:	f7fe fde5 	bl	8003090 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <prvCheckTasksWaitingTermination+0x6c>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fcae 	bl	8002e34 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <prvCheckTasksWaitingTermination+0x70>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	4a0b      	ldr	r2, [pc, #44]	; (800450c <prvCheckTasksWaitingTermination+0x70>)
 80044e0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <prvCheckTasksWaitingTermination+0x74>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <prvCheckTasksWaitingTermination+0x74>)
 80044ea:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80044ec:	f7fe fdfe 	bl	80030ec <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	f000 f80f 	bl	8004514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <prvCheckTasksWaitingTermination+0x74>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1d2      	bne.n	80044a4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20001928 	.word	0x20001928
 800450c:	20001954 	.word	0x20001954
 8004510:	2000193c 	.word	0x2000193c

08004514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe ff49 	bl	80033b8 <vPortFree>
			vPortFree( pxTCB );
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe ff46 	bl	80033b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <prvResetNextTaskUnblockTime+0x44>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <prvResetNextTaskUnblockTime+0x14>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <prvResetNextTaskUnblockTime+0x16>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <prvResetNextTaskUnblockTime+0x48>)
 8004550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004554:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004556:	e008      	b.n	800456a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <prvResetNextTaskUnblockTime+0x44>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <prvResetNextTaskUnblockTime+0x48>)
 8004568:	6013      	str	r3, [r2, #0]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000190c 	.word	0x2000190c
 800457c:	20001974 	.word	0x20001974

08004580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <xTaskGetSchedulerState+0x34>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800458e:	2301      	movs	r3, #1
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	e008      	b.n	80045a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004594:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <xTaskGetSchedulerState+0x38>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800459c:	2302      	movs	r3, #2
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	e001      	b.n	80045a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045a6:	687b      	ldr	r3, [r7, #4]
	}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	20001960 	.word	0x20001960
 80045b8:	2000197c 	.word	0x2000197c

080045bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d06c      	beq.n	80046ac <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045d2:	4b39      	ldr	r3, [pc, #228]	; (80046b8 <xTaskPriorityDisinherit+0xfc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d009      	beq.n	80045f0 <xTaskPriorityDisinherit+0x34>
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e7fe      	b.n	80045ee <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <xTaskPriorityDisinherit+0x50>
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	e7fe      	b.n	800460a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	429a      	cmp	r2, r3
 8004620:	d044      	beq.n	80046ac <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004626:	2b00      	cmp	r3, #0
 8004628:	d140      	bne.n	80046ac <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	3304      	adds	r3, #4
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fc00 	bl	8002e34 <uxListRemove>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d115      	bne.n	8004666 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	491f      	ldr	r1, [pc, #124]	; (80046bc <xTaskPriorityDisinherit+0x100>)
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <xTaskPriorityDisinherit+0xaa>
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	2201      	movs	r2, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43da      	mvns	r2, r3
 800465c:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <xTaskPriorityDisinherit+0x104>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4013      	ands	r3, r2
 8004662:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <xTaskPriorityDisinherit+0x104>)
 8004664:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	f1c3 0207 	rsb	r2, r3, #7
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	2201      	movs	r2, #1
 8004680:	409a      	lsls	r2, r3
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <xTaskPriorityDisinherit+0x104>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4313      	orrs	r3, r2
 8004688:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <xTaskPriorityDisinherit+0x104>)
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <xTaskPriorityDisinherit+0x100>)
 800469a:	441a      	add	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7fe fb69 	bl	8002d7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046ac:	697b      	ldr	r3, [r7, #20]
	}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20001854 	.word	0x20001854
 80046bc:	20001858 	.word	0x20001858
 80046c0:	2000195c 	.word	0x2000195c

080046c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046ce:	4b29      	ldr	r3, [pc, #164]	; (8004774 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3304      	adds	r3, #4
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fbaa 	bl	8002e34 <uxListRemove>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10b      	bne.n	80046fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80046e6:	4b24      	ldr	r3, [pc, #144]	; (8004778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	2201      	movs	r2, #1
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43da      	mvns	r2, r3
 80046f4:	4b21      	ldr	r3, [pc, #132]	; (800477c <prvAddCurrentTaskToDelayedList+0xb8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4013      	ands	r3, r2
 80046fa:	4a20      	ldr	r2, [pc, #128]	; (800477c <prvAddCurrentTaskToDelayedList+0xb8>)
 80046fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004704:	d10a      	bne.n	800471c <prvAddCurrentTaskToDelayedList+0x58>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470c:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3304      	adds	r3, #4
 8004712:	4619      	mov	r1, r3
 8004714:	481a      	ldr	r0, [pc, #104]	; (8004780 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004716:	f7fe fb30 	bl	8002d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800471a:	e026      	b.n	800476a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d209      	bcs.n	8004748 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004734:	4b13      	ldr	r3, [pc, #76]	; (8004784 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3304      	adds	r3, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7fe fb3e 	bl	8002dc2 <vListInsert>
}
 8004746:	e010      	b.n	800476a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc4>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3304      	adds	r3, #4
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f7fe fb34 	bl	8002dc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <prvAddCurrentTaskToDelayedList+0xc8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d202      	bcs.n	800476a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004764:	4a09      	ldr	r2, [pc, #36]	; (800478c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6013      	str	r3, [r2, #0]
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20001958 	.word	0x20001958
 8004778:	20001854 	.word	0x20001854
 800477c:	2000195c 	.word	0x2000195c
 8004780:	20001940 	.word	0x20001940
 8004784:	20001910 	.word	0x20001910
 8004788:	2000190c 	.word	0x2000190c
 800478c:	20001974 	.word	0x20001974

08004790 <initChessboard>:
};

Chessboard gChessboard = {0};

void initChessboard(Chessboard* board)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	uint8_t i = 0, j = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	2300      	movs	r3, #0
 800479e:	73bb      	strb	r3, [r7, #14]
	Cell tmp_cell = (Cell){.isOccupied = false};
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]

//	board->board_[0].fig.val = (uint8_t)6;
//	board->board_[0].pos = (Cell){.row_ = ROW_1, .col_ = COL_A, .isOccupied = false} ;

	//columns
	for(i = 0; i < 8 ; i++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e058      	b.n	800485c <initChessboard+0xcc>
	{
		//rows
		for(j = 0; j < 8 ; j++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	73bb      	strb	r3, [r7, #14]
 80047ae:	e049      	b.n	8004844 <initChessboard+0xb4>
		{
			uint8_t index = j+(8*i);
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	7bbb      	ldrb	r3, [r7, #14]
 80047b8:	4413      	add	r3, r2
 80047ba:	737b      	strb	r3, [r7, #13]
			//minor & major
			if( (i == 0) || (i == 7))
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <initChessboard+0x38>
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b07      	cmp	r3, #7
 80047c6:	d10f      	bne.n	80047e8 <initChessboard+0x58>
			{
				board->board_[index] = backLine[j];
 80047c8:	7b7b      	ldrb	r3, [r7, #13]
 80047ca:	7bb9      	ldrb	r1, [r7, #14]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4828      	ldr	r0, [pc, #160]	; (8004870 <initChessboard+0xe0>)
 80047d0:	5c41      	ldrb	r1, [r0, r1]
 80047d2:	54d1      	strb	r1, [r2, r3]
				if(i == 0)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d12d      	bne.n	8004836 <initChessboard+0xa6>
				{
					board->board_[index].color = 1;
 80047da:	7b7a      	ldrb	r2, [r7, #13]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	5c8b      	ldrb	r3, [r1, r2]
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	548b      	strb	r3, [r1, r2]
				if(i == 0)
 80047e6:	e026      	b.n	8004836 <initChessboard+0xa6>
				}
			}
			//pawns
			else if((i == 1) || (i == 6))
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d002      	beq.n	80047f4 <initChessboard+0x64>
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d115      	bne.n	8004820 <initChessboard+0x90>
			{
				board->board_[index] = (Figure){.type = pawn, .color = 0};
 80047f4:	7b7b      	ldrb	r3, [r7, #13]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	5cca      	ldrb	r2, [r1, r3]
 80047fa:	2001      	movs	r0, #1
 80047fc:	f360 0206 	bfi	r2, r0, #0, #7
 8004800:	54ca      	strb	r2, [r1, r3]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	5cca      	ldrb	r2, [r1, r3]
 8004806:	f36f 12c7 	bfc	r2, #7, #1
 800480a:	54ca      	strb	r2, [r1, r3]
				if(i == 1)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d111      	bne.n	8004836 <initChessboard+0xa6>
				{
					board->board_[index].color = 1;
 8004812:	7b7a      	ldrb	r2, [r7, #13]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	5c8b      	ldrb	r3, [r1, r2]
 8004818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481c:	548b      	strb	r3, [r1, r2]
				if(i == 1)
 800481e:	e00a      	b.n	8004836 <initChessboard+0xa6>
				}
			}
			//empty
			else
			{
				board->board_[index] = (Figure){.type = 0, .color = 0};
 8004820:	7b7b      	ldrb	r3, [r7, #13]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	5cca      	ldrb	r2, [r1, r3]
 8004826:	f36f 0206 	bfc	r2, #0, #7
 800482a:	54ca      	strb	r2, [r1, r3]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	5cca      	ldrb	r2, [r1, r3]
 8004830:	f36f 12c7 	bfc	r2, #7, #1
 8004834:	54ca      	strb	r2, [r1, r3]
			}
//			board->board_[index].pos = tmp_cell;
			tmp_cell.col_ <<= 1;
 8004836:	7abb      	ldrb	r3, [r7, #10]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	72bb      	strb	r3, [r7, #10]
		for(j = 0; j < 8 ; j++)
 800483e:	7bbb      	ldrb	r3, [r7, #14]
 8004840:	3301      	adds	r3, #1
 8004842:	73bb      	strb	r3, [r7, #14]
 8004844:	7bbb      	ldrb	r3, [r7, #14]
 8004846:	2b07      	cmp	r3, #7
 8004848:	d9b2      	bls.n	80047b0 <initChessboard+0x20>
		}
		tmp_cell.col_ = COL_A;
 800484a:	2301      	movs	r3, #1
 800484c:	72bb      	strb	r3, [r7, #10]
		tmp_cell.row_ <<= 1;
 800484e:	893b      	ldrh	r3, [r7, #8]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	b29b      	uxth	r3, r3
 8004854:	813b      	strh	r3, [r7, #8]
	for(i = 0; i < 8 ; i++)
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	3301      	adds	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b07      	cmp	r3, #7
 8004860:	d9a3      	bls.n	80047aa <initChessboard+0x1a>
	}
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c

08004874 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004874:	b5b0      	push	{r4, r5, r7, lr}
 8004876:	b09c      	sub	sp, #112	; 0x70
 8004878:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800487a:	4b33      	ldr	r3, [pc, #204]	; (8004948 <MX_FREERTOS_Init+0xd4>)
 800487c:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8004880:	461d      	mov	r5, r3
 8004882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004886:	682b      	ldr	r3, [r5, #0]
 8004888:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800488a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe f9ed 	bl	8002c70 <osThreadCreate>
 8004896:	4602      	mov	r2, r0
 8004898:	4b2c      	ldr	r3, [pc, #176]	; (800494c <MX_FREERTOS_Init+0xd8>)
 800489a:	601a      	str	r2, [r3, #0]

  /* definition and creation of multiplexerTask */
  osThreadDef(multiplexerTask, StartMultiplexerTask, osPriorityNormal, 0, 128);
 800489c:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <MX_FREERTOS_Init+0xdc>)
 800489e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80048a2:	461d      	mov	r5, r3
 80048a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	6023      	str	r3, [r4, #0]
  multiplexerTaskHandle = osThreadCreate(osThread(multiplexerTask), NULL);
 80048ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe f9dc 	bl	8002c70 <osThreadCreate>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <MX_FREERTOS_Init+0xe0>)
 80048bc:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask */
  osThreadDef(ledTask, StartLedTask, osPriorityLow, 0, 128);
 80048be:	4b26      	ldr	r3, [pc, #152]	; (8004958 <MX_FREERTOS_Init+0xe4>)
 80048c0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80048c4:	461d      	mov	r5, r3
 80048c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048ca:	682b      	ldr	r3, [r5, #0]
 80048cc:	6023      	str	r3, [r4, #0]
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 80048ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe f9cb 	bl	8002c70 <osThreadCreate>
 80048da:	4602      	mov	r2, r0
 80048dc:	4b1f      	ldr	r3, [pc, #124]	; (800495c <MX_FREERTOS_Init+0xe8>)
 80048de:	601a      	str	r2, [r3, #0]

  /* definition and creation of comTask */
  osThreadDef(comTask, StartComTask, osPriorityNormal, 0, 128);
 80048e0:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <MX_FREERTOS_Init+0xec>)
 80048e2:	f107 0420 	add.w	r4, r7, #32
 80048e6:	461d      	mov	r5, r3
 80048e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	6023      	str	r3, [r4, #0]
  comTaskHandle = osThreadCreate(osThread(comTask), NULL);
 80048f0:	f107 0320 	add.w	r3, r7, #32
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe f9ba 	bl	8002c70 <osThreadCreate>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <MX_FREERTOS_Init+0xf0>)
 8004900:	601a      	str	r2, [r3, #0]

  /* definition and creation of chessboardTask */
  osThreadDef(chessboardTask, StartChessboardTask, osPriorityIdle, 0, 128);
 8004902:	4b19      	ldr	r3, [pc, #100]	; (8004968 <MX_FREERTOS_Init+0xf4>)
 8004904:	f107 040c 	add.w	r4, r7, #12
 8004908:	461d      	mov	r5, r3
 800490a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800490c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	6023      	str	r3, [r4, #0]
  chessboardTaskHandle = osThreadCreate(osThread(chessboardTask), NULL);
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe f9a9 	bl	8002c70 <osThreadCreate>
 800491e:	4602      	mov	r2, r0
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <MX_FREERTOS_Init+0xf8>)
 8004922:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of mplexQueue */
  osMessageQDef(mplexQueue, 16, uint8_t);
 8004924:	4a12      	ldr	r2, [pc, #72]	; (8004970 <MX_FREERTOS_Init+0xfc>)
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800492c:	e883 0003 	stmia.w	r3, {r0, r1}
  mplexQueueHandle = osMessageCreate(osMessageQ(mplexQueue), NULL);
 8004930:	1d3b      	adds	r3, r7, #4
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe f9d6 	bl	8002ce6 <osMessageCreate>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <MX_FREERTOS_Init+0x100>)
 800493e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}
 8004940:	bf00      	nop
 8004942:	3770      	adds	r7, #112	; 0x70
 8004944:	46bd      	mov	sp, r7
 8004946:	bdb0      	pop	{r4, r5, r7, pc}
 8004948:	080050e0 	.word	0x080050e0
 800494c:	20001acc 	.word	0x20001acc
 8004950:	08005104 	.word	0x08005104
 8004954:	20001adc 	.word	0x20001adc
 8004958:	08005120 	.word	0x08005120
 800495c:	20001ad4 	.word	0x20001ad4
 8004960:	0800513c 	.word	0x0800513c
 8004964:	20001ad0 	.word	0x20001ad0
 8004968:	08005160 	.word	0x08005160
 800496c:	20001ac8 	.word	0x20001ac8
 8004970:	08005174 	.word	0x08005174
 8004974:	20001ad8 	.word	0x20001ad8

08004978 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004980:	2001      	movs	r0, #1
 8004982:	f7fe f99c 	bl	8002cbe <osDelay>
 8004986:	e7fb      	b.n	8004980 <StartDefaultTask+0x8>

08004988 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498e:	f107 0314 	add.w	r3, r7, #20
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800499e:	4a3b      	ldr	r2, [pc, #236]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049a0:	4b3a      	ldr	r3, [pc, #232]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049a8:	6153      	str	r3, [r2, #20]
 80049aa:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049b6:	4a35      	ldr	r2, [pc, #212]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049b8:	4b34      	ldr	r3, [pc, #208]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049c0:	6153      	str	r3, [r2, #20]
 80049c2:	4b32      	ldr	r3, [pc, #200]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ce:	4a2f      	ldr	r2, [pc, #188]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049d0:	4b2e      	ldr	r3, [pc, #184]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d8:	6153      	str	r3, [r2, #20]
 80049da:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e6:	4a29      	ldr	r2, [pc, #164]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049e8:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f0:	6153      	str	r3, [r2, #20]
 80049f2:	4b26      	ldr	r3, [pc, #152]	; (8004a8c <MX_GPIO_Init+0x104>)
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COLUMN_A_OUTPUT_Pin|COLUMN_B_OUTPUT_Pin|COLUMN_C_OUTPUT_Pin|COLUMN_D_OUTPUT_Pin 
 80049fe:	2200      	movs	r2, #0
 8004a00:	21ff      	movs	r1, #255	; 0xff
 8004a02:	4823      	ldr	r0, [pc, #140]	; (8004a90 <MX_GPIO_Init+0x108>)
 8004a04:	f7fb ff42 	bl	800088c <HAL_GPIO_WritePin>
                          |COLUMN_E_OUTPUT_Pin|COLUMN_F_OUTPUT_Pin|COLUMN_G_OUTPUT_Pin|COLUMN_H_OUTPUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2120      	movs	r1, #32
 8004a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a10:	f7fb ff3c 	bl	800088c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a1a:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <MX_GPIO_Init+0x10c>)
 8004a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004a22:	f107 0314 	add.w	r3, r7, #20
 8004a26:	4619      	mov	r1, r3
 8004a28:	4819      	ldr	r0, [pc, #100]	; (8004a90 <MX_GPIO_Init+0x108>)
 8004a2a:	f7fb fd89 	bl	8000540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COLUMN_A_OUTPUT_Pin|COLUMN_B_OUTPUT_Pin|COLUMN_C_OUTPUT_Pin|COLUMN_D_OUTPUT_Pin 
 8004a2e:	23ff      	movs	r3, #255	; 0xff
 8004a30:	617b      	str	r3, [r7, #20]
                          |COLUMN_E_OUTPUT_Pin|COLUMN_F_OUTPUT_Pin|COLUMN_G_OUTPUT_Pin|COLUMN_H_OUTPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a3e:	f107 0314 	add.w	r3, r7, #20
 8004a42:	4619      	mov	r1, r3
 8004a44:	4812      	ldr	r0, [pc, #72]	; (8004a90 <MX_GPIO_Init+0x108>)
 8004a46:	f7fb fd7b 	bl	8000540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004a4a:	2320      	movs	r3, #32
 8004a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a56:	2300      	movs	r3, #0
 8004a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004a5a:	f107 0314 	add.w	r3, r7, #20
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a64:	f7fb fd6c 	bl	8000540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ROW_3_INPUT_Pin|ROW_4_INPUT_Pin|ROW_5_INPUT_Pin|ROW_6_INPUT_Pin 
 8004a68:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004a6c:	617b      	str	r3, [r7, #20]
                          |ROW_7_INPUT_Pin|ROW_8_INPUT_Pin|ROW_1_INPUT_Pin|ROW_2_INPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a72:	2302      	movs	r3, #2
 8004a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a76:	f107 0314 	add.w	r3, r7, #20
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4806      	ldr	r0, [pc, #24]	; (8004a98 <MX_GPIO_Init+0x110>)
 8004a7e:	f7fb fd5f 	bl	8000540 <HAL_GPIO_Init>

}
 8004a82:	bf00      	nop
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	48000800 	.word	0x48000800
 8004a94:	10210000 	.word	0x10210000
 8004a98:	48000400 	.word	0x48000400

08004a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004aa0:	f7fb fb9e 	bl	80001e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aa4:	f000 f80b 	bl	8004abe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aa8:	f7ff ff6e 	bl	8004988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004aac:	f000 fa2e 	bl	8004f0c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004ab0:	f000 f863 	bl	8004b7a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004ab4:	f7ff fede 	bl	8004874 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004ab8:	f7fe f8d3 	bl	8002c62 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//	Multiplexer mplex;
//	init(&mplex);
  while (1)
 8004abc:	e7fe      	b.n	8004abc <main+0x20>

08004abe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b0a6      	sub	sp, #152	; 0x98
 8004ac2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ac4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004ac8:	2228      	movs	r2, #40	; 0x28
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fae8 	bl	80050a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ad2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	609a      	str	r2, [r3, #8]
 8004ade:	60da      	str	r2, [r3, #12]
 8004ae0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ae2:	1d3b      	adds	r3, r7, #4
 8004ae4:	2258      	movs	r2, #88	; 0x58
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fada 	bl	80050a2 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004aee:	2301      	movs	r3, #1
 8004af0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004af2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004af6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004af8:	2301      	movs	r3, #1
 8004afa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004afc:	2302      	movs	r3, #2
 8004afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004b0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fedf 	bl	80008e0 <HAL_RCC_OscConfig>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004b28:	f000 f833 	bl	8004b92 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b2c:	230f      	movs	r3, #15
 8004b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b30:	2302      	movs	r3, #2
 8004b32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b34:	2300      	movs	r3, #0
 8004b36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b46:	2102      	movs	r1, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fc fdb7 	bl	80016bc <HAL_RCC_ClockConfig>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004b54:	f000 f81d 	bl	8004b92 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc ffe0 	bl	8001b28 <HAL_RCCEx_PeriphCLKConfig>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004b6e:	f000 f810 	bl	8004b92 <Error_Handler>
  }
}
 8004b72:	bf00      	nop
 8004b74:	3798      	adds	r7, #152	; 0x98
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2105      	movs	r1, #5
 8004b82:	2026      	movs	r0, #38	; 0x26
 8004b84:	f7fb fc67 	bl	8000456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b88:	2026      	movs	r0, #38	; 0x26
 8004b8a:	f7fb fc80 	bl	800048e <HAL_NVIC_EnableIRQ>
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b96:	bf00      	nop
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <initMultiplexer>:

Multiplexer gMplex = {0};
Cell gBoard[64] = {0};

void initMultiplexer(Multiplexer* mplex)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0, j = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]
 8004bac:	2300      	movs	r3, #0
 8004bae:	73bb      	strb	r3, [r7, #14]
	Cell tmp_cell = {0};//{COL_A, ROW_1, 0};
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]
	mplex->matrixChanged = true;		//to send initial matrix state
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	tmp_cell.col_ = COL_A;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	72bb      	strb	r3, [r7, #10]
	tmp_cell.row_ = ROW_1;
 8004bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bc4:	813b      	strh	r3, [r7, #8]
	tmp_cell.isOccupied = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	72fb      	strb	r3, [r7, #11]

	//rows
	for(i = 0; i < 8 ; i++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	73fb      	strb	r3, [r7, #15]
 8004bce:	e020      	b.n	8004c12 <initMultiplexer+0x72>
	{
		//columns
		for(j = 0; j < 8 ; j++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73bb      	strb	r3, [r7, #14]
 8004bd4:	e011      	b.n	8004bfa <initMultiplexer+0x5a>
		{
			mplex->matrix_[j+(8*i)] = tmp_cell;
 8004bd6:	7bba      	ldrb	r2, [r7, #14]
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	4413      	add	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	f107 0208 	add.w	r2, r7, #8
 8004be8:	6810      	ldr	r0, [r2, #0]
 8004bea:	6018      	str	r0, [r3, #0]
			tmp_cell.col_ <<= 1;
 8004bec:	7abb      	ldrb	r3, [r7, #10]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	72bb      	strb	r3, [r7, #10]
		for(j = 0; j < 8 ; j++)
 8004bf4:	7bbb      	ldrb	r3, [r7, #14]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	73bb      	strb	r3, [r7, #14]
 8004bfa:	7bbb      	ldrb	r3, [r7, #14]
 8004bfc:	2b07      	cmp	r3, #7
 8004bfe:	d9ea      	bls.n	8004bd6 <initMultiplexer+0x36>
		}
		tmp_cell.col_ = COL_A;
 8004c00:	2301      	movs	r3, #1
 8004c02:	72bb      	strb	r3, [r7, #10]
		tmp_cell.row_ <<= 1;
 8004c04:	893b      	ldrh	r3, [r7, #8]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	813b      	strh	r3, [r7, #8]
	for(i = 0; i < 8 ; i++)
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b07      	cmp	r3, #7
 8004c16:	d9db      	bls.n	8004bd0 <initMultiplexer+0x30>
	}
}
 8004c18:	bf00      	nop
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <scanMatrix>:

void scanMatrix(Multiplexer* mplex)
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0, j = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	73fb      	strb	r3, [r7, #15]
 8004c30:	2300      	movs	r3, #0
 8004c32:	73bb      	strb	r3, [r7, #14]
	Column col_pin = COLUMN_A_OUTPUT_Pin;
 8004c34:	2301      	movs	r3, #1
 8004c36:	737b      	strb	r3, [r7, #13]
	Row row_pin = ROW_1_INPUT_Pin;
 8004c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c3c:	817b      	strh	r3, [r7, #10]
//	GPIO_PinState state;

	//columns
	for(i = 0; i < 8 ; i++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	e050      	b.n	8004ce6 <scanMatrix+0xc2>
	{
		HAL_GPIO_WritePin(GPIOC, col_pin, GPIO_PIN_SET);
 8004c44:	7b7b      	ldrb	r3, [r7, #13]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2201      	movs	r2, #1
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4829      	ldr	r0, [pc, #164]	; (8004cf4 <scanMatrix+0xd0>)
 8004c4e:	f7fb fe1d 	bl	800088c <HAL_GPIO_WritePin>
		//rows
		for(j = 0; j < 8 ; j++)
 8004c52:	2300      	movs	r3, #0
 8004c54:	73bb      	strb	r3, [r7, #14]
 8004c56:	e033      	b.n	8004cc0 <scanMatrix+0x9c>
		{
			uint8_t index = j+(8*i);
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	7bbb      	ldrb	r3, [r7, #14]
 8004c60:	4413      	add	r3, r2
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	727b      	strb	r3, [r7, #9]
			//if change
			if((mplex->matrix_[index].isOccupied) != (HAL_GPIO_ReadPin(GPIOB, row_pin)))
 8004c66:	7a7b      	ldrb	r3, [r7, #9]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	78dc      	ldrb	r4, [r3, #3]
 8004c70:	897b      	ldrh	r3, [r7, #10]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4820      	ldr	r0, [pc, #128]	; (8004cf8 <scanMatrix+0xd4>)
 8004c76:	f7fb fdf1 	bl	800085c <HAL_GPIO_ReadPin>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	d019      	beq.n	8004cb4 <scanMatrix+0x90>
			{
				(mplex->matrix_[index].isOccupied) = !(mplex->matrix_[index].isOccupied);
 8004c80:	7a7b      	ldrb	r3, [r7, #9]
 8004c82:	4619      	mov	r1, r3
 8004c84:	7a7b      	ldrb	r3, [r7, #9]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	78db      	ldrb	r3, [r3, #3]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	4618      	mov	r0, r3
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	008b      	lsls	r3, r1, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	70da      	strb	r2, [r3, #3]
//				mplex->matrixChanged = true;
				xQueueSend(mplexQueueHandle,(void*) &index, 1);
 8004ca4:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <scanMatrix+0xd8>)
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	f107 0109 	add.w	r1, r7, #9
 8004cac:	2300      	movs	r3, #0
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f7fe fd56 	bl	8003760 <xQueueGenericSend>
//			}
//			else
//			{
//				mplex->matrix_[j+(8*i)].isOccupied = 0;
//			}
			row_pin <<= 1;
 8004cb4:	897b      	ldrh	r3, [r7, #10]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < 8 ; j++)
 8004cba:	7bbb      	ldrb	r3, [r7, #14]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	73bb      	strb	r3, [r7, #14]
 8004cc0:	7bbb      	ldrb	r3, [r7, #14]
 8004cc2:	2b07      	cmp	r3, #7
 8004cc4:	d9c8      	bls.n	8004c58 <scanMatrix+0x34>
		}
		row_pin = ROW_1;
 8004cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cca:	817b      	strh	r3, [r7, #10]
		HAL_GPIO_WritePin(GPIOC, col_pin, GPIO_PIN_RESET);
 8004ccc:	7b7b      	ldrb	r3, [r7, #13]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4807      	ldr	r0, [pc, #28]	; (8004cf4 <scanMatrix+0xd0>)
 8004cd6:	f7fb fdd9 	bl	800088c <HAL_GPIO_WritePin>
		col_pin <<= 1;
 8004cda:	7b7b      	ldrb	r3, [r7, #13]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	737b      	strb	r3, [r7, #13]
	for(i = 0; i < 8 ; i++)
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b07      	cmp	r3, #7
 8004cea:	d9ab      	bls.n	8004c44 <scanMatrix+0x20>
	}
//	return mplex->matrix_;
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd90      	pop	{r4, r7, pc}
 8004cf4:	48000800 	.word	0x48000800
 8004cf8:	48000400 	.word	0x48000400
 8004cfc:	20001ad8 	.word	0x20001ad8

08004d00 <StartChessboardTask>:

extern Multiplexer gMplex;
extern Chessboard gChessboard;

void StartChessboardTask(void const * argument)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUsbTask */
	initChessboard(&gChessboard);
 8004d08:	4803      	ldr	r0, [pc, #12]	; (8004d18 <StartChessboardTask+0x18>)
 8004d0a:	f7ff fd41 	bl	8004790 <initChessboard>
	/* Infinite loop */
	for(;;)
	{

		osDelay(10);
 8004d0e:	200a      	movs	r0, #10
 8004d10:	f7fd ffd5 	bl	8002cbe <osDelay>
 8004d14:	e7fb      	b.n	8004d0e <StartChessboardTask+0xe>
 8004d16:	bf00      	nop
 8004d18:	20001980 	.word	0x20001980

08004d1c <StartMultiplexerTask>:
	}
	/* USER CODE END StartUsbTask */
}

void StartMultiplexerTask(void const * argument)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_multiplexerTask */
	initMultiplexer(&gMplex);
 8004d24:	4809      	ldr	r0, [pc, #36]	; (8004d4c <StartMultiplexerTask+0x30>)
 8004d26:	f7ff ff3b 	bl	8004ba0 <initMultiplexer>
	/* Infinite loop */
	for(;;)
	{
		scanMatrix(&gMplex);
 8004d2a:	4808      	ldr	r0, [pc, #32]	; (8004d4c <StartMultiplexerTask+0x30>)
 8004d2c:	f7ff ff7a 	bl	8004c24 <scanMatrix>
		if(gMplex.matrixChanged)
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <StartMultiplexerTask+0x30>)
 8004d32:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <StartMultiplexerTask+0x26>
		{
			//do sth
			gMplex.matrixChanged = false;
 8004d3a:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <StartMultiplexerTask+0x30>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		}
		osDelay(250);
 8004d42:	20fa      	movs	r0, #250	; 0xfa
 8004d44:	f7fd ffbb 	bl	8002cbe <osDelay>
		scanMatrix(&gMplex);
 8004d48:	e7ef      	b.n	8004d2a <StartMultiplexerTask+0xe>
 8004d4a:	bf00      	nop
 8004d4c:	200019c0 	.word	0x200019c0

08004d50 <StartLedTask>:
	}
	/* USER CODE END Start_multiplexerTask */
}

void StartLedTask(void const * argument)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLedTask */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004d58:	2120      	movs	r1, #32
 8004d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d5e:	f7fb fdad 	bl	80008bc <HAL_GPIO_TogglePin>
		osDelay(250);
 8004d62:	20fa      	movs	r0, #250	; 0xfa
 8004d64:	f7fd ffab 	bl	8002cbe <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004d68:	e7f6      	b.n	8004d58 <StartLedTask+0x8>
	...

08004d6c <StartComTask>:
	}
	/* USER CODE END StartLedTask */
}

void StartComTask(void const * argument)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b08b      	sub	sp, #44	; 0x2c
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUsbTask */
	uint8_t txBuff[30] = {"Hello World!"};
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <StartComTask+0x58>)
 8004d76:	f107 0408 	add.w	r4, r7, #8
 8004d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d7c:	c407      	stmia	r4!, {r0, r1, r2}
 8004d7e:	7023      	strb	r3, [r4, #0]
 8004d80:	f107 0315 	add.w	r3, r7, #21
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	741a      	strb	r2, [r3, #16]
	uint16_t len = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	84fb      	strh	r3, [r7, #38]	; 0x26

//	 ++MessageCounter;
	len = sprintf(txBuff, "Hello World! \n\r");
 8004d94:	f107 0308 	add.w	r3, r7, #8
 8004d98:	4a0b      	ldr	r2, [pc, #44]	; (8004dc8 <StartComTask+0x5c>)
 8004d9a:	461c      	mov	r4, r3
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004da4:	230f      	movs	r3, #15
 8004da6:	84fb      	strh	r3, [r7, #38]	; 0x26
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Transmit(&huart2, txBuff, len, 1000);
 8004da8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004daa:	f107 0108 	add.w	r1, r7, #8
 8004dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004db2:	4806      	ldr	r0, [pc, #24]	; (8004dcc <StartComTask+0x60>)
 8004db4:	f7fd f925 	bl	8002002 <HAL_UART_Transmit>
		osDelay(1000);
 8004db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dbc:	f7fd ff7f 	bl	8002cbe <osDelay>
		HAL_UART_Transmit(&huart2, txBuff, len, 1000);
 8004dc0:	e7f2      	b.n	8004da8 <StartComTask+0x3c>
 8004dc2:	bf00      	nop
 8004dc4:	0800518c 	.word	0x0800518c
 8004dc8:	0800517c 	.word	0x0800517c
 8004dcc:	20001ae0 	.word	0x20001ae0

08004dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd6:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <HAL_MspInit+0x4c>)
 8004dd8:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <HAL_MspInit+0x4c>)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	6193      	str	r3, [r2, #24]
 8004de2:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <HAL_MspInit+0x4c>)
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dee:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <HAL_MspInit+0x4c>)
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <HAL_MspInit+0x4c>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df8:	61d3      	str	r3, [r2, #28]
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <HAL_MspInit+0x4c>)
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e06:	2200      	movs	r2, #0
 8004e08:	210f      	movs	r1, #15
 8004e0a:	f06f 0001 	mvn.w	r0, #1
 8004e0e:	f7fb fb22 	bl	8000456 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e12:	bf00      	nop
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000

08004e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e32:	e7fe      	b.n	8004e32 <HardFault_Handler+0x4>

08004e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e38:	e7fe      	b.n	8004e38 <MemManage_Handler+0x4>

08004e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e3e:	e7fe      	b.n	8004e3e <BusFault_Handler+0x4>

08004e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e44:	e7fe      	b.n	8004e44 <UsageFault_Handler+0x4>

08004e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e46:	b480      	push	{r7}
 8004e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e58:	f7fb fa08 	bl	800026c <HAL_IncTick>
  osSystickHandler();
 8004e5c:	f7fd ff55 	bl	8002d0a <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e68:	4802      	ldr	r0, [pc, #8]	; (8004e74 <USART2_IRQHandler+0x10>)
 8004e6a:	f7fd f957 	bl	800211c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20001ae0 	.word	0x20001ae0

08004e78 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <SystemInit+0x84>)
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <SystemInit+0x84>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004e8c:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <SystemInit+0x88>)
 8004e8e:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <SystemInit+0x88>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004e98:	4919      	ldr	r1, [pc, #100]	; (8004f00 <SystemInit+0x88>)
 8004e9a:	4b19      	ldr	r3, [pc, #100]	; (8004f00 <SystemInit+0x88>)
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <SystemInit+0x8c>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004ea4:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <SystemInit+0x88>)
 8004ea6:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <SystemInit+0x88>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004eb4:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <SystemInit+0x88>)
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <SystemInit+0x88>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <SystemInit+0x88>)
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <SystemInit+0x88>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004eca:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004ecc:	4a0c      	ldr	r2, [pc, #48]	; (8004f00 <SystemInit+0x88>)
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <SystemInit+0x88>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f023 030f 	bic.w	r3, r3, #15
 8004ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004ed8:	4909      	ldr	r1, [pc, #36]	; (8004f00 <SystemInit+0x88>)
 8004eda:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <SystemInit+0x88>)
 8004edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <SystemInit+0x90>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <SystemInit+0x88>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004eea:	4b04      	ldr	r3, [pc, #16]	; (8004efc <SystemInit+0x84>)
 8004eec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ef0:	609a      	str	r2, [r3, #8]
#endif
}
 8004ef2:	bf00      	nop
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	e000ed00 	.word	0xe000ed00
 8004f00:	40021000 	.word	0x40021000
 8004f04:	f87fc00c 	.word	0xf87fc00c
 8004f08:	ff00fccc 	.word	0xff00fccc

08004f0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f12:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <MX_USART2_UART_Init+0x5c>)
 8004f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f32:	220c      	movs	r2, #12
 8004f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f4e:	4805      	ldr	r0, [pc, #20]	; (8004f64 <MX_USART2_UART_Init+0x58>)
 8004f50:	f7fd f806 	bl	8001f60 <HAL_UART_Init>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004f5a:	f7ff fe1a 	bl	8004b92 <Error_Handler>
  }

}
 8004f5e:	bf00      	nop
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20001ae0 	.word	0x20001ae0
 8004f68:	40004400 	.word	0x40004400

08004f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	; 0x28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f74:	f107 0314 	add.w	r3, r7, #20
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <HAL_UART_MspInit+0x7c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d128      	bne.n	8004fe0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f8e:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_UART_MspInit+0x80>)
 8004f90:	4b16      	ldr	r3, [pc, #88]	; (8004fec <HAL_UART_MspInit+0x80>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f98:	61d3      	str	r3, [r2, #28]
 8004f9a:	4b14      	ldr	r3, [pc, #80]	; (8004fec <HAL_UART_MspInit+0x80>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa6:	4a11      	ldr	r2, [pc, #68]	; (8004fec <HAL_UART_MspInit+0x80>)
 8004fa8:	4b10      	ldr	r3, [pc, #64]	; (8004fec <HAL_UART_MspInit+0x80>)
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb0:	6153      	str	r3, [r2, #20]
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <HAL_UART_MspInit+0x80>)
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fce:	2307      	movs	r3, #7
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd2:	f107 0314 	add.w	r3, r7, #20
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fdc:	f7fb fab0 	bl	8000540 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3728      	adds	r7, #40	; 0x28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40004400 	.word	0x40004400
 8004fec:	40021000 	.word	0x40021000

08004ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005028 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ff4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ff6:	e003      	b.n	8005000 <LoopCopyDataInit>

08004ff8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ffa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ffc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004ffe:	3104      	adds	r1, #4

08005000 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005000:	480b      	ldr	r0, [pc, #44]	; (8005030 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005004:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005006:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005008:	d3f6      	bcc.n	8004ff8 <CopyDataInit>
	ldr	r2, =_sbss
 800500a:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <LoopForever+0x12>)
	b	LoopFillZerobss
 800500c:	e002      	b.n	8005014 <LoopFillZerobss>

0800500e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800500e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005010:	f842 3b04 	str.w	r3, [r2], #4

08005014 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005014:	4b09      	ldr	r3, [pc, #36]	; (800503c <LoopForever+0x16>)
	cmp	r2, r3
 8005016:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005018:	d3f9      	bcc.n	800500e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800501a:	f7ff ff2d 	bl	8004e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800501e:	f000 f811 	bl	8005044 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005022:	f7ff fd3b 	bl	8004a9c <main>

08005026 <LoopForever>:

LoopForever:
    b LoopForever
 8005026:	e7fe      	b.n	8005026 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005028:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800502c:	080051ec 	.word	0x080051ec
	ldr	r0, =_sdata
 8005030:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005034:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8005038:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 800503c:	20001b50 	.word	0x20001b50

08005040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005040:	e7fe      	b.n	8005040 <ADC1_2_IRQHandler>
	...

08005044 <__libc_init_array>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4e0d      	ldr	r6, [pc, #52]	; (800507c <__libc_init_array+0x38>)
 8005048:	4c0d      	ldr	r4, [pc, #52]	; (8005080 <__libc_init_array+0x3c>)
 800504a:	1ba4      	subs	r4, r4, r6
 800504c:	10a4      	asrs	r4, r4, #2
 800504e:	2500      	movs	r5, #0
 8005050:	42a5      	cmp	r5, r4
 8005052:	d109      	bne.n	8005068 <__libc_init_array+0x24>
 8005054:	4e0b      	ldr	r6, [pc, #44]	; (8005084 <__libc_init_array+0x40>)
 8005056:	4c0c      	ldr	r4, [pc, #48]	; (8005088 <__libc_init_array+0x44>)
 8005058:	f000 f82c 	bl	80050b4 <_init>
 800505c:	1ba4      	subs	r4, r4, r6
 800505e:	10a4      	asrs	r4, r4, #2
 8005060:	2500      	movs	r5, #0
 8005062:	42a5      	cmp	r5, r4
 8005064:	d105      	bne.n	8005072 <__libc_init_array+0x2e>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800506c:	4798      	blx	r3
 800506e:	3501      	adds	r5, #1
 8005070:	e7ee      	b.n	8005050 <__libc_init_array+0xc>
 8005072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005076:	4798      	blx	r3
 8005078:	3501      	adds	r5, #1
 800507a:	e7f2      	b.n	8005062 <__libc_init_array+0x1e>
 800507c:	080051e4 	.word	0x080051e4
 8005080:	080051e4 	.word	0x080051e4
 8005084:	080051e4 	.word	0x080051e4
 8005088:	080051e8 	.word	0x080051e8

0800508c <memcpy>:
 800508c:	b510      	push	{r4, lr}
 800508e:	1e43      	subs	r3, r0, #1
 8005090:	440a      	add	r2, r1
 8005092:	4291      	cmp	r1, r2
 8005094:	d100      	bne.n	8005098 <memcpy+0xc>
 8005096:	bd10      	pop	{r4, pc}
 8005098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a0:	e7f7      	b.n	8005092 <memcpy+0x6>

080050a2 <memset>:
 80050a2:	4402      	add	r2, r0
 80050a4:	4603      	mov	r3, r0
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d100      	bne.n	80050ac <memset+0xa>
 80050aa:	4770      	bx	lr
 80050ac:	f803 1b01 	strb.w	r1, [r3], #1
 80050b0:	e7f9      	b.n	80050a6 <memset+0x4>
	...

080050b4 <_init>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr

080050c0 <_fini>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr
